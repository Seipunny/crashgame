using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
/// </summary>
public class ButtonDebugger : MonoBehaviour
{
    [Header("–û—Ç–ª–∞–¥–∫–∞")]
    public bool debugOnStart = true;
    public bool debugOnClick = true;
    
    private CrashGamePrototype prototype;
    
    private void Start()
    {
        prototype = FindObjectOfType<CrashGamePrototype>();
        
        if (debugOnStart)
        {
            DebugButtonStates();
        }
    }
    
    [ContextMenu("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫")]
    public void DebugButtonStates()
    {
        Debug.Log("üîç –û–¢–õ–ê–î–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ö–ù–û–ü–û–ö");
        Debug.Log("=".PadRight(50, '='));
        
        if (prototype == null)
        {
            Debug.LogError("‚ùå CrashGamePrototype –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
        CheckButton("PlaceBetButton", prototype.placeBetButton);
        CheckButton("CashoutButton", prototype.cashoutButton);
        CheckButton("IncreaseBetButton", prototype.increaseBetButton);
        CheckButton("DecreaseBetButton", prototype.decreaseBetButton);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç—ã
        CheckText("MultiplierText", prototype.multiplierText);
        CheckText("BalanceText", prototype.balanceText);
        CheckText("BetText", prototype.betText);
        CheckText("StatusText", prototype.statusText);
        CheckText("HistoryText", prototype.historyText);
        
        Debug.Log("=".PadRight(50, '='));
    }
    
    private void CheckButton(string name, Button button)
    {
        if (button == null)
        {
            Debug.LogError($"‚ùå {name}: –ù–ï –ù–ê–ô–î–ï–ù");
            return;
        }
        
        Debug.Log($"‚úÖ {name}: –Ω–∞–π–¥–µ–Ω");
        Debug.Log($"   - Interactable: {button.interactable}");
        Debug.Log($"   - Listeners count: {button.onClick.GetPersistentEventCount()}");
        
        if (debugOnClick)
        {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            button.onClick.AddListener(() => Debug.Log($"üéØ {name} –Ω–∞–∂–∞—Ç–∞!"));
        }
    }
    
    private void CheckText(string name, TMPro.TextMeshProUGUI text)
    {
        if (text == null)
        {
            Debug.LogError($"‚ùå {name}: –ù–ï –ù–ê–ô–î–ï–ù");
            return;
        }
        
        Debug.Log($"‚úÖ {name}: –Ω–∞–π–¥–µ–Ω");
        Debug.Log($"   - Text: {text.text}");
        Debug.Log($"   - Enabled: {text.enabled}");
    }
    
    [ContextMenu("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å UI")]
    public void RestartUI()
    {
        Debug.Log("üîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö UI");
        
        if (prototype != null)
        {
            prototype.SetupUI();
            prototype.UpdateUI();
            Debug.Log("‚úÖ UI –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω");
        }
        else
        {
            Debug.LogError("‚ùå CrashGamePrototype –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        }
    }
} 