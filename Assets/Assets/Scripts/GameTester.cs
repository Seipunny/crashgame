using UnityEngine;
using UnityEngine.UI;
using TMPro;

/// <summary>
/// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏
/// </summary>
public class GameTester : MonoBehaviour
{
    [Header("Test UI")]
    public Button testMultiplierButton;
    public Button testCrashButton;
    public Button testRTPButton;
    public Button fullRTPTestButton;
    public TextMeshProUGUI testResultsText;
    
    private void Start()
    {
        SetupTestUI();
        RunInitialTests();
    }
    
    /// <summary>
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    /// </summary>
    private void SetupTestUI()
    {
        if (testMultiplierButton != null)
            testMultiplierButton.onClick.AddListener(TestMultiplierFormula);
        
        if (testCrashButton != null)
            testCrashButton.onClick.AddListener(TestCrashDistribution);
        
        if (testRTPButton != null)
            testRTPButton.onClick.AddListener(TestRTP);
        
        if (fullRTPTestButton != null)
            fullRTPTestButton.onClick.AddListener(FullRTPTest);
    }
    
    /// <summary>
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    /// </summary>
    private void RunInitialTests()
    {
        Debug.Log("=== –ù–ê–ß–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ú–û–î–ï–õ–ò ===");
        
        // –¢–µ—Å—Ç —Ñ–æ—Ä–º—É–ª—ã –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞
        TestMultiplierFormula();
        
        // –¢–µ—Å—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä–∞—à–µ–π
        TestCrashDistribution();
        
        // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç RTP
        TestRTP();
        
        Debug.Log("=== –ù–ê–ß–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===");
    }
    
    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞
    /// </summary>
    public void TestMultiplierFormula()
    {
        Debug.Log("üßÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—É –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞...");
        MultiplierCalculator.TestMultiplierFormula();
        
        if (testResultsText != null)
        {
            testResultsText.text = "‚úÖ –¢–µ—Å—Ç —Ñ–æ—Ä–º—É–ª—ã –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω\n";
        }
    }
    
    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∞—à–µ–π
    /// </summary>
    public void TestCrashDistribution()
    {
        Debug.Log("üé≤ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∞—à–µ–π...");
        CrashPointGenerator.TestCrashDistribution();
        
        if (testResultsText != null)
        {
            testResultsText.text += "‚úÖ –¢–µ—Å—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä–∞—à–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω\n";
        }
    }
    
    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç RTP
    /// </summary>
    public void TestRTP()
    {
        Debug.Log("üí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º RTP (10,000 —Ä–∞—É–Ω–¥–æ–≤)...");
        var result = RTPValidator.ValidateRTP(10000);
        RTPValidator.PrintValidationReport(result);
        
        if (testResultsText != null)
        {
            testResultsText.text += $"‚úÖ –¢–µ—Å—Ç RTP –∑–∞–≤–µ—Ä—à–µ–Ω: {result.actualRTP:P4}\n";
        }
    }
    
    /// <summary>
    /// –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç RTP
    /// </summary>
    public void FullRTPTest()
    {
        Debug.Log("üî¨ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç RTP (1,000,000 —Ä–∞—É–Ω–¥–æ–≤)...");
        var result = RTPValidator.ValidateRTP(1000000);
        RTPValidator.PrintValidationReport(result);
        
        if (testResultsText != null)
        {
            testResultsText.text += $"‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç RTP –∑–∞–≤–µ—Ä—à–µ–Ω: {result.actualRTP:P4}\n";
        }
    }
    
    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞
    /// </summary>
    public void TestControlPoints()
    {
        Debug.Log("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞...");
        
        float[] testTimes = { 8f, 35f, 50f };
        float[] expectedValues = { 2.0f, 20.0f, 100.0f };
        
        for (int i = 0; i < testTimes.Length; i++)
        {
            float calculated = MultiplierCalculator.CalculateMultiplier(testTimes[i]);
            float expected = expectedValues[i];
            float difference = Mathf.Abs(calculated - expected);
            float accuracy = (1f - difference / expected) * 100f;
            
            Debug.Log($"t={testTimes[i]:F1}s: –û–∂–∏–¥–∞–µ—Ç—Å—è={expected:F2}, –í—ã—á–∏—Å–ª–µ–Ω–æ={calculated:F2}, –¢–æ—á–Ω–æ—Å—Ç—å={accuracy:F1}%");
        }
    }
    
    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    /// </summary>
    public void TestReverseCalculation()
    {
        Debug.Log("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏...");
        
        float[] targetMultipliers = { 2.0f, 5.0f, 10.0f, 20.0f, 50.0f };
        
        foreach (float target in targetMultipliers)
        {
            float time = MultiplierCalculator.CalculateTimeForMultiplier(target);
            float calculatedMultiplier = MultiplierCalculator.CalculateMultiplier(time);
            float difference = Mathf.Abs(calculatedMultiplier - target);
            
            Debug.Log($"–¶–µ–ª—å: x{target:F1} | –í—Ä–µ–º—è: {time:F2}—Å | –†–µ–∑—É–ª—å—Ç–∞—Ç: x{calculatedMultiplier:F2} | –†–∞–∑–Ω–∏—Ü–∞: {difference:F3}");
        }
    }
    
    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–æ–≤
    /// </summary>
    public void TestExpectedValues()
    {
        Debug.Log("üìà –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è...");
        
        float[] testMultipliers = { 1.5f, 2.0f, 3.0f, 5.0f, 10.0f, 20.0f };
        
        foreach (float multiplier in testMultipliers)
        {
            float expectedValue = CrashPointGenerator.GetExpectedValue(multiplier);
            Debug.Log($"–ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä x{multiplier:F1}: E[payout] = {expectedValue:F4} (—Ü–µ–ª—å: 0.9600)");
        }
    }
    
    /// <summary>
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
    /// </summary>
    public void RunAllTests()
    {
        Debug.Log("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...");
        
        TestControlPoints();
        TestReverseCalculation();
        TestExpectedValues();
        TestMultiplierFormula();
        TestCrashDistribution();
        TestRTP();
        
        Debug.Log("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
    }
} 