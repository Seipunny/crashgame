using UnityEngine;

/// <summary>
/// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ RTP
/// </summary>
public class RTPTest : MonoBehaviour
{
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞")]
    public bool runOnStart = true;
    public int testRounds = 10000;
    
    private void Start()
    {
        if (runOnStart)
        {
            TestRTP();
        }
    }
    
    [ContextMenu("–¢–µ—Å—Ç RTP")]
    public void TestRTP()
    {
        Debug.Log("üéØ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û RTP");
        Debug.Log("=".PadRight(50, '='));
        
        var result = RTPValidator.ValidateRTP(testRounds);
        
        Debug.Log($"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ ({testRounds:N0} —Ä–∞—É–Ω–¥–æ–≤):");
        Debug.Log($"üéØ RTP: {result.actualRTP:P4}");
        Debug.Log($"üìà –í–∏–Ω—Ä–µ–π—Ç: {result.successRate:P2}");
        Debug.Log($"üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–∞—à: x{result.maxCrashPoint:F2}");
        Debug.Log($"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {result.maxWin:F2}");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ RTP —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        float targetRTP = 0.96f;
        float deviation = Mathf.Abs(result.actualRTP - targetRTP);
        
        if (deviation <= 0.01f) // ¬±1%
        {
            Debug.Log("‚úÖ RTP –í –ù–û–†–ú–ï! –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±1%");
        }
        else if (deviation <= 0.02f) // ¬±2%
        {
            Debug.Log("‚ö†Ô∏è RTP –ü–†–ò–ï–ú–õ–ï–ú–û! –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±2%");
        }
        else
        {
            Debug.LogError("‚ùå RTP –ù–ï –í –ù–û–†–ú–ï! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞");
        }
        
        Debug.Log($"üéØ –¶–µ–ª–µ–≤–æ–π RTP: {targetRTP:P2}");
        Debug.Log($"üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π RTP: {result.actualRTP:P4}");
        Debug.Log($"üìè –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {deviation:P4}");
        
        Debug.Log("=".PadRight(50, '='));
    }
} 