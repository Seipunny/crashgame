using UnityEngine;

/// <summary>
/// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏
/// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
/// </summary>
public class QuickTest : MonoBehaviour
{
    private void Start()
    {
        Debug.Log("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ú–û–î–ï–õ–ò –ö–†–ï–® –ò–ì–†–´");
        Debug.Log("=".PadRight(60, '='));
        
        // –¢–µ—Å—Ç 1: –§–æ—Ä–º—É–ª–∞ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞
        TestMultiplierFormula();
        
        // –¢–µ—Å—Ç 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∞—à–µ–π
        TestCrashDistribution();
        
        // –¢–µ—Å—Ç 3: RTP
        TestRTP();
        
        Debug.Log("=".PadRight(60, '='));
        Debug.Log("‚úÖ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!");
    }
    
    private void TestMultiplierFormula()
    {
        Debug.Log("\nüßÆ –¢–ï–°–¢ 1: –§–û–†–ú–£–õ–ê –ú–£–õ–¨–¢–ò–ü–õ–ò–ö–ê–¢–û–†–ê");
        
        float[] testTimes = { 0f, 8f, 35f, 50f, 80f, 120f };
        float[] expectedValues = { 1.00f, 2.00f, 20.00f, 100.00f, 500.00f, 1000.00f };
        
        bool allPassed = true;
        
        for (int i = 0; i < testTimes.Length; i++)
        {
            float calculated = MultiplierCalculator.CalculateMultiplier(testTimes[i]);
            float expected = expectedValues[i];
            float difference = Mathf.Abs(calculated - expected);
            float accuracy = (1f - difference / expected) * 100f;
            
            string status = accuracy > 95f ? "‚úÖ" : "‚ùå";
            Debug.Log($"{status} t={testTimes[i]:F1}s: –û–∂–∏–¥–∞–µ—Ç—Å—è={expected:F2}, –í—ã—á–∏—Å–ª–µ–Ω–æ={calculated:F2}, –¢–æ—á–Ω–æ—Å—Ç—å={accuracy:F1}%");
            
            if (accuracy <= 95f) allPassed = false;
        }
        
        Debug.Log(allPassed ? "‚úÖ –¢–ï–°–¢ 1 –ü–†–û–ô–î–ï–ù" : "‚ùå –¢–ï–°–¢ 1 –ù–ï –ü–†–û–ô–î–ï–ù");
    }
    
    private void TestCrashDistribution()
    {
        Debug.Log("\nüé≤ –¢–ï–°–¢ 2: –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–†–ê–®–ï–ô");
        
        int sampleSize = 10000;
        int[] buckets = new int[7];
        float[] bucketRanges = { 1.01f, 2.0f, 5.0f, 10.0f, 20.0f, 50.0f, 100.0f, 1000.0f };
        
        for (int i = 0; i < sampleSize; i++)
        {
            float crashPoint = CrashPointGenerator.GenerateCrashPoint();
            
            for (int j = 0; j < bucketRanges.Length - 1; j++)
            {
                if (crashPoint >= bucketRanges[j] && crashPoint < bucketRanges[j + 1])
                {
                    buckets[j]++;
                    break;
                }
            }
        }
        
        Debug.Log("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∞—à–µ–π:");
        for (int i = 0; i < buckets.Length; i++)
        {
            float percentage = (float)buckets[i] / sampleSize * 100f;
            Debug.Log($"  {bucketRanges[i]:F2}-{bucketRanges[i + 1]:F2}: {buckets[i]} ({percentage:F1}%)");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        Debug.Log("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:");
        float[] testMultipliers = { 1.5f, 2.0f, 3.0f, 5.0f, 10.0f };
        bool allCorrect = true;
        
        foreach (float multiplier in testMultipliers)
        {
            float expectedValue = CrashPointGenerator.GetExpectedValue(multiplier);
            bool correct = Mathf.Abs(expectedValue - 0.96f) < 0.001f;
            string status = correct ? "‚úÖ" : "‚ùå";
            Debug.Log($"{status} x{multiplier:F1}: E[payout] = {expectedValue:F4} (—Ü–µ–ª—å: 0.9600)");
            
            if (!correct) allCorrect = false;
        }
        
        Debug.Log(allCorrect ? "‚úÖ –¢–ï–°–¢ 2 –ü–†–û–ô–î–ï–ù" : "‚ùå –¢–ï–°–¢ 2 –ù–ï –ü–†–û–ô–î–ï–ù");
    }
    
    private void TestRTP()
    {
        Debug.Log("\nüí∞ –¢–ï–°–¢ 3: RTP (10,000 —Ä–∞—É–Ω–¥–æ–≤)");
        
        var result = RTPValidator.ValidateRTP(10000);
        
        Debug.Log($"–¶–µ–ª–µ–≤–æ–π RTP: 96.00%");
        Debug.Log($"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π RTP: {result.actualRTP:P4}");
        Debug.Log($"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {Mathf.Abs(result.actualRTP - 0.96f):P4}");
        Debug.Log($"–í–∏–Ω—Ä–µ–π—Ç: {result.successRate:P2}");
        Debug.Log($"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–∞—à: x{result.maxCrashPoint:F2}");
        Debug.Log($"–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {result.testDuration:F2}—Å");
        
        bool rtpCorrect = Mathf.Abs(result.actualRTP - 0.96f) < 0.01f;
        Debug.Log(rtpCorrect ? "‚úÖ –¢–ï–°–¢ 3 –ü–†–û–ô–î–ï–ù" : "‚ùå –¢–ï–°–¢ 3 –ù–ï –ü–†–û–ô–î–ï–ù");
    }
} 