using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// –í–∞–ª–∏–¥–∞—Ç–æ—Ä RTP –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ –∫—Ä–∞—à –∏–≥—Ä—ã
/// </summary>
public static class RTPValidator
{
    private const float TARGET_RTP = 0.96f;
    private const float ACCEPTABLE_DEVIATION = 0.01f; // 1%
    
    /// <summary>
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ RTP
    /// </summary>
    [System.Serializable]
    public struct ValidationResult
    {
        public float totalBets;
        public float totalPayouts;
        public float actualRTP;
        public float successRate;
        public int successfulGames;
        public int failedGames;
        public Dictionary<string, int> crashDistribution;
        public float maxCrashPoint;
        public float maxWin;
        public float testDuration;
        
        public ValidationResult()
        {
            totalBets = 0f;
            totalPayouts = 0f;
            actualRTP = 0f;
            successRate = 0f;
            successfulGames = 0;
            failedGames = 0;
            crashDistribution = new Dictionary<string, int>
            {
                {"1.01-2.00", 0},
                {"2.01-5.00", 0}, 
                {"5.01-10.00", 0},
                {"10.01-20.00", 0},
                {"20.01-50.00", 0},
                {"50.01-100.00", 0},
                {"100.01+", 0}
            };
            maxCrashPoint = 0f;
            maxWin = 0f;
            testDuration = 0f;
        }
    }
    
    /// <summary>
    /// –ü—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é RTP —á–µ—Ä–µ–∑ —Å–∏–º—É–ª—è—Ü–∏—é
    /// </summary>
    /// <param name="numberOfRounds">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏</param>
    /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏</returns>
    public static ValidationResult ValidateRTP(int numberOfRounds = 100000)
    {
        var result = new ValidationResult();
        float startTime = Time.realtimeSinceStartup;
        
        Debug.Log($"–ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é RTP –Ω–∞ {numberOfRounds:N0} —Ä–∞—É–Ω–¥–æ–≤...");
        
        for (int i = 0; i < numberOfRounds; i++)
        {
            float bet = 1.0f; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 1.0
            float crashPoint = CrashPointGenerator.GenerateCrashPoint();
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
            float cashoutPoint = SimulatePlayerBehavior(crashPoint);
            
            result.totalBets += bet;
            
            if (cashoutPoint <= crashPoint)
            {
                // –ò–≥—Ä–æ–∫ —É—Å–ø–µ–ª –∑–∞–±—Ä–∞—Ç—å
                float winAmount = bet * cashoutPoint;
                result.totalPayouts += winAmount;
                result.successfulGames++;
                
                if (winAmount > result.maxWin)
                {
                    result.maxWin = winAmount;
                }
            }
            else
            {
                // –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª
                result.failedGames++;
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∞—à–µ–π
            AnalyzeCrashPoint(crashPoint, result);
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10% —Ä–∞—É–Ω–¥–æ–≤
            if ((i + 1) % (numberOfRounds / 10) == 0)
            {
                float progress = (float)(i + 1) / numberOfRounds * 100f;
                float currentRTP = result.totalPayouts / result.totalBets;
                Debug.Log($"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:F1}% | –¢–µ–∫—É—â–∏–π RTP: {currentRTP:P4}");
            }
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result.actualRTP = result.totalPayouts / result.totalBets;
        result.successRate = (float)result.successfulGames / numberOfRounds;
        result.testDuration = Time.realtimeSinceStartup - startTime;
        
        return result;
    }
    
    /// <summary>
    /// –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ (–Ω–∞ –∫–∞–∫–æ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–µ –∑–∞–±–∏—Ä–∞–µ—Ç)
    /// </summary>
    /// <param name="crashPoint">–¢–æ—á–∫–∞ –∫—Ä–∞—à–∞</param>
    /// <returns>–ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –∫–µ—à–∞—É—Ç–∞</returns>
    private static float SimulatePlayerBehavior(float crashPoint)
    {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        // –ò–≥—Ä–æ–∫ –∫–µ—à–∞—É—Ç–∏—Ç—Å—è —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 96% –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Ç–æ—á–∫–µ –¥–æ –∫—Ä–∞—à–∞
        
        float random = UnityEngine.Random.Range(0f, 1f);
        
        if (random < 0.96f)
        {
            // –ò–≥—Ä–æ–∫ –∫–µ—à–∞—É—Ç–∏—Ç—Å—è –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Ç–æ—á–∫–µ –¥–æ –∫—Ä–∞—à–∞
            float cashoutPoint = 1.0f + random * (crashPoint - 1.0f);
            return cashoutPoint;
        }
        else
        {
            // –ò–≥—Ä–æ–∫ –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç –∫–µ—à–∞—É—Ç–∏—Ç—å—Å—è (4% —Å–ª—É—á–∞–µ–≤)
            return crashPoint;
        }
    }
    
    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –∫—Ä–∞—à–∞
    /// </summary>
    /// <param name="crashPoint">–¢–æ—á–∫–∞ –∫—Ä–∞—à–∞</param>
    /// <param name="result">–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏</param>
    private static void AnalyzeCrashPoint(float crashPoint, ValidationResult result)
    {
        if (crashPoint > result.maxCrashPoint)
        {
            result.maxCrashPoint = crashPoint;
        }
        
        if (crashPoint <= 2.00f) result.crashDistribution["1.01-2.00"]++;
        else if (crashPoint <= 5.00f) result.crashDistribution["2.01-5.00"]++;
        else if (crashPoint <= 10.00f) result.crashDistribution["5.01-10.00"]++;
        else if (crashPoint <= 20.00f) result.crashDistribution["10.01-20.00"]++;
        else if (crashPoint <= 50.00f) result.crashDistribution["20.01-50.00"]++;
        else if (crashPoint <= 100.00f) result.crashDistribution["50.01-100.00"]++;
        else result.crashDistribution["100.01+"]++;
    }
    
    /// <summary>
    /// –í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    /// </summary>
    /// <param name="result">–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏</param>
    public static void PrintValidationReport(ValidationResult result)
    {
        Debug.Log("=".PadRight(50, '='));
        Debug.Log("–û–¢–ß–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–ò RTP");
        Debug.Log("=".PadRight(50, '='));
        
        Debug.Log($"–¶–µ–ª–µ–≤–æ–π RTP: {TARGET_RTP:P2}");
        Debug.Log($"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π RTP: {result.actualRTP:P4}");
        Debug.Log($"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {Mathf.Abs(result.actualRTP - TARGET_RTP):P4}");
        Debug.Log($"–í–∏–Ω—Ä–µ–π—Ç: {result.successRate:P2}");
        
        Debug.Log($"\n–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:");
        Debug.Log($"–í—Å–µ–≥–æ –∏–≥—Ä: {(result.successfulGames + result.failedGames):N0}");
        Debug.Log($"–£—Å–ø–µ—à–Ω—ã—Ö: {result.successfulGames:N0}");
        Debug.Log($"–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö: {result.failedGames:N0}");
        Debug.Log($"–û–±—â–∏–µ —Å—Ç–∞–≤–∫–∏: {result.totalBets:N0}");
        Debug.Log($"–û–±—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã: {result.totalPayouts:N0}");
        
        Debug.Log($"\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:");
        Debug.Log($"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–∞—à: x{result.maxCrashPoint:F2}");
        Debug.Log($"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {result.maxWin:F2}");
        Debug.Log($"–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {result.testDuration:F2}—Å");
        
        Debug.Log($"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∞—à–µ–π:");
        int totalCrashes = 0;
        foreach (var kvp in result.crashDistribution)
        {
            totalCrashes += kvp.Value;
        }
        
        foreach (var kvp in result.crashDistribution)
        {
            float percentage = (float)kvp.Value / totalCrashes * 100f;
            Debug.Log($"{kvp.Key}: {kvp.Value:N0} ({percentage:F2}%)");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ RTP —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        float rtpDifference = Mathf.Abs(result.actualRTP - TARGET_RTP);
        if (rtpDifference < ACCEPTABLE_DEVIATION)
        {
            Debug.Log($"\n‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–ô–î–ï–ù–ê! RTP –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö");
            Debug.Log($"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {rtpDifference:P4} < {ACCEPTABLE_DEVIATION:P2}");
        }
        else
        {
            Debug.Log($"\n‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –ü–†–û–ô–î–ï–ù–ê! RTP —Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏");
            Debug.Log($"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {rtpDifference:P4} > {ACCEPTABLE_DEVIATION:P2}");
        }
        
        Debug.Log("=".PadRight(50, '='));
    }
    
    /// <summary>
    /// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç RTP (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    /// </summary>
    public static void QuickRTPTest()
    {
        Debug.Log("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç RTP (10,000 —Ä–∞—É–Ω–¥–æ–≤)...");
        
        var result = ValidateRTP(10000);
        PrintValidationReport(result);
    }
    
    /// <summary>
    /// –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç RTP (–¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
    /// </summary>
    public static void FullRTPTest()
    {
        Debug.Log("üßÆ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç RTP (1,000,000 —Ä–∞—É–Ω–¥–æ–≤)...");
        
        var result = ValidateRTP(1000000);
        PrintValidationReport(result);
    }
} 