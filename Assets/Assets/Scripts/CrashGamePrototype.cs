using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.Collections;

/// <summary>
/// –ü—Ä–æ—Ç–æ—Ç–∏–ø –∫—Ä–∞—à-–∏–≥—Ä—ã —Å –±–∞–∑–æ–≤—ã–º UI
/// </summary>
public class CrashGamePrototype : MonoBehaviour
{
    [Header("UI Elements")]
    public TextMeshProUGUI multiplierText;
    public TextMeshProUGUI balanceText;
    public TextMeshProUGUI betText;
    public TextMeshProUGUI statusText;
    public TextMeshProUGUI historyText;
    public TextMeshProUGUI finalWinText;
    public TextMeshProUGUI roundText;
    public Slider bettingProgressBar;
    
    [Header("Buttons")]
    public Button placeBetButton;
    public Button cashoutButton;
    public Button increaseBetButton;
    public Button decreaseBetButton;
    
    [Header("Game Settings")]
    public float playerBalance = 1000f;
    public float currentBet = 10f;
    public float minBet = 10f;
    public float maxBet = 100f;
    public float betStep = 5f;
    
    [Header("Game State")]
    public bool isGameRunning = false;
    public bool isBettingPhase = false;
    public bool hasPlacedBet = false;
    public bool hasCashedOut = false;
    public float currentMultiplier = 1.0f;
    public float crashPoint = 1.0f;
    public float gameTime = 0f;
    public float maxGameTime = 60f;
    public float finalWinAmount = 0f;
    
    [Header("Round System")]
    public float bettingPhaseDuration = 5f;
    public float bettingPhaseTime = 0f;
    public int currentRound = 1;
    
    [Header("History")]
    public string[] gameHistory = new string[10];
    public int historyIndex = 0;
    
    [Header("UI Colors")]
    public Color normalColor = Color.white;
    public Color winColor = Color.green;
    public Color loseColor = Color.red;
    public Color missedColor = Color.yellow;
    
    private Coroutine gameCoroutine;
    
    private void Start()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
        playerBalance = 1000f;
        currentBet = Mathf.Clamp(10f, minBet, maxBet); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        
        Debug.Log("üéÆ –ü—Ä–æ—Ç–æ—Ç–∏–ø –∫—Ä–∞—à-–∏–≥—Ä—ã –∑–∞–ø—É—â–µ–Ω!");
        Debug.Log($"üí∞ –ë–∞–ª–∞–Ω—Å: {playerBalance}, –°—Ç–∞–≤–∫–∞: {currentBet}");
        Debug.Log($"üìä –õ–∏–º–∏—Ç—ã: –º–∏–Ω {minBet}, –º–∞–∫—Å {maxBet}, —à–∞–≥ {betStep}");
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        AddToHistory("–¢–ï–°–¢ x1.00");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–∞—É–Ω–¥–æ–≤ (UI —Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        StartNewRound();
    }
    
    public void SetupUI()
    {
        Debug.Log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...");
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
        if (placeBetButton != null)
        {
            placeBetButton.onClick.AddListener(PlaceBet);
            Debug.Log("‚úÖ PlaceBetButton –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è PlaceBetButton –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        if (cashoutButton != null)
        {
            cashoutButton.onClick.AddListener(Cashout);
            Debug.Log("‚úÖ CashoutButton –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è CashoutButton –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        if (increaseBetButton != null)
        {
            increaseBetButton.onClick.AddListener(IncreaseBet);
            Debug.Log("‚úÖ IncreaseBetButton –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è IncreaseBetButton –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        if (decreaseBetButton != null)
        {
            decreaseBetButton.onClick.AddListener(DecreaseBet);
            Debug.Log("‚úÖ DecreaseBetButton –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è DecreaseBetButton –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        SetButtonStates(false);
        Debug.Log("‚úÖ UI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
    }
    
    private void Update()
    {
        if (isGameRunning)
        {
            UpdateGame();
        }
    }
    
    private void UpdateGame()
    {
        gameTime += Time.deltaTime;
        currentMultiplier = MultiplierCalculator.CalculateMultiplier(gameTime);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Ç–æ—á–∫–∏ –∫—Ä–∞—à–∞
        if (currentMultiplier >= crashPoint)
        {
            Crash();
        }
        
        UpdateUI();
    }
    
    public void UpdateUI()
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã
        if (multiplierText != null)
            multiplierText.text = $"x{currentMultiplier:F2}";
        
        if (balanceText != null)
            balanceText.text = $"üí∞ –ë–∞–ª–∞–Ω—Å: {playerBalance:F0}";
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞
        if (roundText != null)
        {
            roundText.text = $"üéØ –†–∞—É–Ω–¥ {currentRound}";
        }
        
        if (betText != null)
        {
            if (hasPlacedBet && isGameRunning)
            {
                float potentialWin = currentBet * currentMultiplier;
                betText.text = $"–°—Ç–∞–≤–∫–∞: {currentBet:F0} | –í—ã–∏–≥—Ä—ã—à: {potentialWin:F0}";
                betText.color = normalColor;
            }
            else if (hasCashedOut && isGameRunning)
            {
                betText.text = $"–°—Ç–∞–≤–∫–∞: {currentBet:F0} | –ó–∞–±—Ä–∞–Ω–æ: +{finalWinAmount:F0}";
                betText.color = winColor;
            }
            else
            {
                betText.text = $"–°—Ç–∞–≤–∫–∞: {currentBet:F0}";
                betText.color = normalColor;
            }
        }
        
        if (statusText != null)
        {
            if (isBettingPhase)
            {
                float timeLeft = bettingPhaseDuration - bettingPhaseTime;
                if (hasPlacedBet)
                {
                    statusText.text = $"‚úÖ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å: {timeLeft:F1}—Å";
                    statusText.color = winColor;
                }
                else
                {
                    statusText.text = $"‚è∞ –§–∞–∑–∞ —Å—Ç–∞–≤–æ–∫! –û—Å—Ç–∞–ª–æ—Å—å: {timeLeft:F1}—Å";
                    statusText.color = normalColor;
                }
            }
            else if (isGameRunning)
            {
                if (hasPlacedBet)
                {
                    statusText.text = "üéÆ –ò–≥—Ä–∞ –∏–¥–µ—Ç...";
                    statusText.color = normalColor;
                }
                else if (hasCashedOut)
                {
                    statusText.text = $"–ö–µ—à–∞—É—Ç! +{finalWinAmount:F0}";
                    statusText.color = winColor;
                }
                else
                {
                    statusText.text = "üëÄ –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...";
                    statusText.color = normalColor;
                }
            }
            else if (hasPlacedBet)
            {
                statusText.text = "–ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ";
                statusText.color = normalColor;
            }
            else
            {
                statusText.text = "–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Å—Ç–∞–≤–∫—É";
                statusText.color = normalColor;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        UpdateHistoryUI();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à
        UpdateFinalWinText();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ñ–∞–∑—ã —Å—Ç–∞–≤–æ–∫
        UpdateBettingProgressBar();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ñ–∞–∑–µ —Å—Ç–∞–≤–æ–∫
        if (isBettingPhase)
        {
            SetBettingPhaseButtonStates();
            UpdateBetButtonText();
        }
        else
        {
            UpdateBetButtonText();
        }
        
        // –û—Ç–ª–∞–¥–∫–∞ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        Debug.Log($"üîç UI Debug - historyText: {(historyText != null ? "–Ω–∞–π–¥–µ–Ω" : "–ù–ï –ù–ê–ô–î–ï–ù")}, " +
                 $"balanceText: {(balanceText != null ? "–Ω–∞–π–¥–µ–Ω" : "–ù–ï –ù–ê–ô–î–ï–ù")}, " +
                 $"betText: {(betText != null ? "–Ω–∞–π–¥–µ–Ω" : "–ù–ï –ù–ê–ô–î–ï–ù")}");
    }
    
    private void UpdateHistoryUI()
    {
        if (historyText != null)
        {
            string history = "–ò—Å—Ç–æ—Ä–∏—è:\n";
            for (int i = 0; i < gameHistory.Length; i++)
            {
                int index = (historyIndex - i + gameHistory.Length) % gameHistory.Length;
                if (!string.IsNullOrEmpty(gameHistory[index]))
                {
                    history += gameHistory[index] + "\n";
                }
            }
            historyText.text = history;
            Debug.Log($"üìú –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è: {history}");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è historyText –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        }
    }
    
    private void UpdateFinalWinText()
    {
        if (finalWinText != null)
        {
            if (hasCashedOut && isGameRunning)
            {
                finalWinText.text = $"üéâ –ó–ê–ë–†–ê–ù–û: +{finalWinAmount:F0}";
                finalWinText.color = winColor;
            }
            else
            {
                finalWinText.text = "";
            }
        }
    }
    
    private void UpdateBettingProgressBar()
    {
        if (bettingProgressBar != null)
        {
            if (isBettingPhase)
            {
                bettingProgressBar.gameObject.SetActive(true);
                bettingProgressBar.value = bettingPhaseTime / bettingPhaseDuration;
            }
            else
            {
                bettingProgressBar.gameObject.SetActive(false);
            }
        }
    }
    
    private void UpdateBetButtonText()
    {
        if (placeBetButton == null) return;
        
        if (hasCashedOut)
        {
            placeBetButton.GetComponentInChildren<TextMeshProUGUI>().text = "–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û";
        }
        else if (isBettingPhase)
        {
            placeBetButton.GetComponentInChildren<TextMeshProUGUI>().text = hasPlacedBet ? "–û–¢–ú–ï–ù–ò–¢–¨" : "–°–¢–ê–í–ö–ê";
        }
        else if (isGameRunning && !hasPlacedBet)
        {
            placeBetButton.GetComponentInChildren<TextMeshProUGUI>().text = "–°–¢–ê–í–ö–ê";
        }
        else
        {
            placeBetButton.GetComponentInChildren<TextMeshProUGUI>().text = "–°–¢–ê–í–ö–ê";
        }
    }
    
    public void PlaceBet()
    {
        Debug.Log($"üîò PlaceBet –≤—ã–∑–≤–∞–Ω! isBettingPhase={isBettingPhase}, hasPlacedBet={hasPlacedBet}, isGameRunning={isGameRunning}");
        
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç –∏ —É–∂–µ –±—ã–ª –∫–µ—à–∞—É—Ç - –±–ª–æ–∫–∏—Ä—É–µ–º
        if (isGameRunning && hasCashedOut)
        {
            Debug.Log("‚ùå PlaceBet: —É–∂–µ –±—ã–ª –∫–µ—à–∞—É—Ç –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ");
            return;
        }
        
        // –ï—Å–ª–∏ –≤ —Ñ–∞–∑–µ —Å—Ç–∞–≤–æ–∫ –∏ —Å—Ç–∞–≤–∫–∞ –µ—â–µ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞
        if (isBettingPhase && !hasPlacedBet)
        {
            hasPlacedBet = true;
            playerBalance -= currentBet;
            Debug.Log($"‚úÖ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞: {currentBet}");
            UpdateUI();
            return;
        }
        
        // –ï—Å–ª–∏ –≤ —Ñ–∞–∑–µ —Å—Ç–∞–≤–æ–∫ –∏ —Å—Ç–∞–≤–∫–∞ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞ - –æ—Ç–º–µ–Ω—è–µ–º
        if (isBettingPhase && hasPlacedBet)
        {
            hasPlacedBet = false;
            playerBalance += currentBet;
            Debug.Log($"‚ùå –°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {currentBet}");
            UpdateUI();
            return;
        }
        
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç –∏ —Å—Ç–∞–≤–∫–∞ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞ - —Ä–∞–∑–º–µ—â–∞–µ–º
        if (isGameRunning && !hasPlacedBet && !hasCashedOut)
        {
            hasPlacedBet = true;
            playerBalance -= currentBet;
            Debug.Log($"–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞: {currentBet}");
            UpdateUI();
            return;
        }
        
        Debug.Log("‚ùå PlaceBet: —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ");
    }
    

    
    public void Cashout()
    {
        Debug.Log($"üîò Cashout –≤—ã–∑–≤–∞–Ω! isGameRunning={isGameRunning}, hasPlacedBet={hasPlacedBet}");
        if (!isGameRunning || !hasPlacedBet) 
        {
            Debug.Log("‚ùå Cashout: —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ");
            return;
        }
        
        float winAmount = currentBet * currentMultiplier;
        playerBalance += winAmount;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        AddToHistory($"WIN x{currentMultiplier:F2}");
        
        Debug.Log($"–ö–µ—à–∞—É—Ç! –í—ã–∏–≥—Ä—ã—à: {winAmount:F2}");
        
        // –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –Ω–æ –∏–≥—Ä–æ–∫ —É–∂–µ –∑–∞–±—Ä–∞–ª –≤—ã–∏–≥—Ä—ã—à
        hasPlacedBet = false;
        hasCashedOut = true;
        SetButtonStates(false);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –∑–∞–±—Ä–∞–ª –≤—ã–∏–≥—Ä—ã—à
        if (statusText != null)
        {
            statusText.text = $"–ö–µ—à–∞—É—Ç! +{winAmount:F0}";
            statusText.color = winColor;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        finalWinAmount = winAmount;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
        UpdateUI();
    }
    
    public void IncreaseBet()
    {
        if (isGameRunning || hasPlacedBet) return;
        
        currentBet = Mathf.Min(currentBet + betStep, maxBet);
        Debug.Log($"üìà –°—Ç–∞–≤–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞: {currentBet}");
        UpdateUI();
    }
    
    public void DecreaseBet()
    {
        if (isGameRunning || hasPlacedBet) return;
        
        currentBet = Mathf.Max(currentBet - betStep, minBet);
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
        if (currentBet < minBet) currentBet = minBet;
        
        Debug.Log($"üìâ –°—Ç–∞–≤–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∞: {currentBet} (–º–∏–Ω: {minBet})");
        UpdateUI();
    }
    
    private void StartNewRound()
    {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –∫—Ä–∞—à–∞
        crashPoint = CrashPointGenerator.GenerateCrashPoint();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        isGameRunning = false;
        isBettingPhase = true;
        hasPlacedBet = false;
        hasCashedOut = false;
        currentMultiplier = 1.0f;
        gameTime = 0f;
        bettingPhaseTime = 0f;
        finalWinAmount = 0f;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∞–∑—ã —Å—Ç–∞–≤–æ–∫
        SetBettingPhaseButtonStates();
        UpdateUI();
        
        Debug.Log($"üîÑ –†–∞—É–Ω–¥ {currentRound}. –§–∞–∑–∞ —Å—Ç–∞–≤–æ–∫ –Ω–∞—á–∞–ª–∞—Å—å. –ö—Ä–∞—à: x{crashPoint:F2}");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–∑—É —Å—Ç–∞–≤–æ–∫
        StartCoroutine(BettingPhase());
    }
    

    
    private void StartGame()
    {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–π —Ñ–∞–∑—ã
        SetButtonStates(true);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        gameCoroutine = StartCoroutine(GameLoop());
    }
    
    private IEnumerator GameLoop()
    {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        yield return new WaitForSeconds(1f);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        isGameRunning = true;
        Debug.Log("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!");
        
        // –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ –∫—Ä–∞—à–∞ –∏–ª–∏ –∫–µ—à–∞—É—Ç–∞
        while (isGameRunning && gameTime < maxGameTime)
        {
            yield return null;
        }
        
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –Ω–æ –∏–≥—Ä–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
        if (isGameRunning)
        {
            Crash();
        }
    }
    
    private void Crash()
    {
        isGameRunning = false;
        
        // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—à –≤ –∏—Å—Ç–æ—Ä–∏—é
        AddToHistory($"CRASH x{crashPoint:F2}");
        
        if (hasPlacedBet)
        {
            Debug.Log($"–ö—Ä–∞—à! x{crashPoint:F2}");
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª
            if (statusText != null)
            {
                statusText.text = $"–ö–†–ê–®! -{currentBet:F0}";
                statusText.color = loseColor;
            }
        }
        else if (hasCashedOut)
        {
            // –ò–≥—Ä–æ–∫ —É–∂–µ –∑–∞–±—Ä–∞–ª –≤—ã–∏–≥—Ä—ã—à, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—É—â–µ–Ω–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
            if (statusText != null)
            {
                statusText.text = $"–£–ü–£–©–ï–ù–û! x{crashPoint:F2}";
                statusText.color = missedColor;
            }
        }
        else
        {
            // –ò–≥—Ä–æ–∫ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Ä–∞—É–Ω–¥–µ
            Debug.Log($"–ö—Ä–∞—à! x{crashPoint:F2} (–∏–≥—Ä–æ–∫ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª)");
        }
        
        EndRound();
    }
    
    private void EndRound()
    {
        hasPlacedBet = false;
        hasCashedOut = false;
        finalWinAmount = 0f;
        SetButtonStates(false);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –∏–≥—Ä—ã
        if (gameCoroutine != null)
        {
            StopCoroutine(gameCoroutine);
            gameCoroutine = null;
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—É–Ω–¥–æ–º
        StartCoroutine(DelayedNewRound());
    }
    
    private IEnumerator DelayedNewRound()
    {
        yield return new WaitForSeconds(2f);
        currentRound++;
        StartNewRound();
    }
    
    private IEnumerator BettingPhase()
    {
        Debug.Log("‚è∞ –§–∞–∑–∞ —Å—Ç–∞–≤–æ–∫ –Ω–∞—á–∞–ª–∞—Å—å!");
        
        while (bettingPhaseTime < bettingPhaseDuration && isBettingPhase)
        {
            bettingPhaseTime += Time.deltaTime;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            if (bettingProgressBar != null)
            {
                bettingProgressBar.value = bettingPhaseTime / bettingPhaseDuration;
            }
            
            yield return null;
        }
        
        // –§–∞–∑–∞ —Å—Ç–∞–≤–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
        isBettingPhase = false;
        
        Debug.Log($"‚è∞ –§–∞–∑–∞ —Å—Ç–∞–≤–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞: {hasPlacedBet}");
        
        // –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Ñ–∞–∑—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∏ –∏–≥—Ä–æ–∫ —Å—Ç–∞–≤–∫—É
        StartGame();
    }
    
    private void SetButtonStates(bool gameRunning)
    {
        if (placeBetButton != null)
        {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ —É–∂–µ –±—ã–ª –∫–µ—à–∞—É—Ç
            placeBetButton.interactable = !hasCashedOut;
        }
        
        if (cashoutButton != null)
        {
            cashoutButton.interactable = gameRunning && hasPlacedBet && !hasCashedOut;
        }
        
        if (increaseBetButton != null)
        {
            increaseBetButton.interactable = !gameRunning && !hasPlacedBet;
        }
        
        if (decreaseBetButton != null)
        {
            decreaseBetButton.interactable = !gameRunning && !hasPlacedBet;
        }
    }
    
    private void SetBettingPhaseButtonStates()
    {
        if (placeBetButton != null)
            placeBetButton.interactable = true; // –ö–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —Ñ–∞–∑–µ —Å—Ç–∞–≤–æ–∫
        
        if (cashoutButton != null)
            cashoutButton.interactable = false;
        
        if (increaseBetButton != null)
            increaseBetButton.interactable = !hasPlacedBet; // –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞
        
        if (decreaseBetButton != null)
            decreaseBetButton.interactable = !hasPlacedBet; // –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞
    }
    
    private void AddToHistory(string result)
    {
        Debug.Log($"üìú –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é: {result} (–∏–Ω–¥–µ–∫—Å: {historyIndex})");
        gameHistory[historyIndex] = result;
        historyIndex = (historyIndex + 1) % gameHistory.Length;
        Debug.Log($"üìú –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {historyIndex}");
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    [ContextMenu("–ê–≤—Ç–æ-—Å—Ç–∞–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫")]
    public void AutoBetAndStart()
    {
        if (!hasPlacedBet)
        {
            PlaceBet();
        }
    }
    
    [ContextMenu("–ê–≤—Ç–æ-–∫–µ—à–∞—É—Ç –Ω–∞ x2")]
    public void AutoCashoutAt2x()
    {
        if (isGameRunning && hasPlacedBet && currentMultiplier >= 2.0f)
        {
            Cashout();
        }
    }
} 