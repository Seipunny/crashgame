using UnityEngine;

/// <summary>
/// –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏
/// </summary>
public class QuickValidation : MonoBehaviour
{
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")]
    public bool runOnStart = true;
    public int testRounds = 1000; // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
    
    private void Start()
    {
        if (runOnStart)
        {
            ValidateAllComponents();
        }
    }
    
    [ContextMenu("–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")]
    public void ValidateAllComponents()
    {
        Debug.Log("üöÄ –ë–´–°–¢–†–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ú–û–î–ï–õ–ò");
        Debug.Log("=".PadRight(60, '='));
        
        bool allPassed = true;
        
        // –¢–µ—Å—Ç 1: MultiplierCalculator
        allPassed &= TestMultiplierCalculator();
        
        // –¢–µ—Å—Ç 2: CrashPointGenerator
        allPassed &= TestCrashPointGenerator();
        
        // –¢–µ—Å—Ç 3: RTPValidator
        allPassed &= TestRTPValidator();
        
        // –¢–µ—Å—Ç 4: GameManager
        allPassed &= TestGameManager();
        
        // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        Debug.Log("=".PadRight(60, '='));
        if (allPassed)
        {
            Debug.Log("‚úÖ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!");
            Debug.Log("üéØ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.");
        }
        else
        {
            Debug.LogError("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ö–û–ú–ü–û–ù–ï–ù–¢–ê–•!");
        }
    }
    
    private bool TestMultiplierCalculator()
    {
        Debug.Log("üßÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º MultiplierCalculator...");
        
        try
        {
            float[] testTimes = { 0f, 8f, 35f, 50f };
            float[] expectedValues = { 1.00f, 2.00f, 20.00f, 100.00f };
            
            for (int i = 0; i < testTimes.Length; i++)
            {
                float calculated = MultiplierCalculator.CalculateMultiplier(testTimes[i]);
                float expected = expectedValues[i];
                float accuracy = (1f - Mathf.Abs(calculated - expected) / expected) * 100f;
                
                if (accuracy > 95f)
                {
                    Debug.Log($"  ‚úÖ t={testTimes[i]}s: x{calculated:F2} (—Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:F1}%)");
                }
                else
                {
                    Debug.LogError($"  ‚ùå t={testTimes[i]}s: –æ–∂–∏–¥–∞–µ—Ç—Å—è x{expected:F2}, –ø–æ–ª—É—á–µ–Ω–æ x{calculated:F2}");
                    return false;
                }
            }
            
            Debug.Log("  ‚úÖ MultiplierCalculator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            return true;
        }
        catch (System.Exception e)
        {
            Debug.LogError($"  ‚ùå –û—à–∏–±–∫–∞ –≤ MultiplierCalculator: {e.Message}");
            return false;
        }
    }
    
    private bool TestCrashPointGenerator()
    {
        Debug.Log("üé≤ –¢–µ—Å—Ç–∏—Ä—É–µ–º CrashPointGenerator...");
        
        try
        {
            float minCrash = float.MaxValue;
            float maxCrash = float.MinValue;
            float totalCrash = 0f;
            
            for (int i = 0; i < testRounds; i++)
            {
                float crashPoint = CrashPointGenerator.GenerateCrashPoint();
                
                if (crashPoint < 1.01f || crashPoint > 1000f)
                {
                    Debug.LogError($"  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—Ä–∞—à: x{crashPoint:F2}");
                    return false;
                }
                
                minCrash = Mathf.Min(minCrash, crashPoint);
                maxCrash = Mathf.Max(maxCrash, crashPoint);
                totalCrash += crashPoint;
            }
            
            float avgCrash = totalCrash / testRounds;
            
            Debug.Log($"  ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–∞—à: x{minCrash:F2}");
            Debug.Log($"  ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–∞—à: x{maxCrash:F2}");
            Debug.Log($"  ‚úÖ –°—Ä–µ–¥–Ω–∏–π –∫—Ä–∞—à: x{avgCrash:F2}");
            Debug.Log("  ‚úÖ CrashPointGenerator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            
            return true;
        }
        catch (System.Exception e)
        {
            Debug.LogError($"  ‚ùå –û—à–∏–±–∫–∞ –≤ CrashPointGenerator: {e.Message}");
            return false;
        }
    }
    
    private bool TestRTPValidator()
    {
        Debug.Log("üí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º RTPValidator...");
        
        try
        {
            var result = RTPValidator.ValidateRTP(testRounds);
            
            Debug.Log($"  ‚úÖ RTP: {result.actualRTP:P4}");
            Debug.Log($"  ‚úÖ –í–∏–Ω—Ä–µ–π—Ç: {result.successRate:P2}");
            Debug.Log($"  ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–∞—à: x{result.maxCrashPoint:F2}");
            
            if (result.actualRTP >= 0.95f && result.actualRTP <= 0.97f)
            {
                Debug.Log("  ‚úÖ RTP –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö (95-97%)");
                return true;
            }
            else
            {
                Debug.LogWarning($"  ‚ö†Ô∏è RTP –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤: {result.actualRTP:P4}");
                return false;
            }
        }
        catch (System.Exception e)
        {
            Debug.LogError($"  ‚ùå –û—à–∏–±–∫–∞ –≤ RTPValidator: {e.Message}");
            return false;
        }
    }
    
    private bool TestGameManager()
    {
        Debug.Log("üéÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º GameManager...");
        
        try
        {
            GameObject tempObj = new GameObject("TempGameManager");
            GameManager gameManager = tempObj.AddComponent<GameManager>();
            
            if (gameManager.playerBalance > 0)
            {
                Debug.Log($"  ‚úÖ –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞: {gameManager.playerBalance}");
                DestroyImmediate(tempObj);
                return true;
            }
            else
            {
                Debug.LogError("  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞");
                DestroyImmediate(tempObj);
                return false;
            }
        }
        catch (System.Exception e)
        {
            Debug.LogError($"  ‚ùå –û—à–∏–±–∫–∞ –≤ GameManager: {e.Message}");
            return false;
        }
    }
} 