using UnityEngine;

/// <summary>
/// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ –≤ Unity Editor
/// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞ –ª—é–±–æ–π GameObject –≤ —Å—Ü–µ–Ω–µ
/// </summary>
public class MathTestRunner : MonoBehaviour
{
    [Header("–¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    public bool runTestsOnStart = true;
    public int rtpTestRounds = 10000;
    public bool showDetailedLogs = true;
    
    private void Start()
    {
        if (runTestsOnStart)
        {
            RunAllTests();
        }
    }
    
    /// <summary>
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏
    /// </summary>
    [ContextMenu("–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")]
    public void RunAllTests()
    {
        Debug.Log("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ú–û–î–ï–õ–ò –ö–†–ï–® –ò–ì–†–´");
        Debug.Log("=".PadRight(70, '='));
        
        // –¢–µ—Å—Ç 1: –§–æ—Ä–º—É–ª–∞ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞
        TestMultiplierFormula();
        
        // –¢–µ—Å—Ç 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∞—à–µ–π
        TestCrashDistribution();
        
        // –¢–µ—Å—Ç 3: RTP
        TestRTP();
        
        // –¢–µ—Å—Ç 4: –û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        TestExpectedValues();
        
        // –¢–µ—Å—Ç 5: –û–±—Ä–∞—Ç–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
        TestReverseCalculation();
        
        Debug.Log("=".PadRight(70, '='));
        Debug.Log("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!");
    }
    
    /// <summary>
    /// –¢–µ—Å—Ç 1: –§–æ—Ä–º—É–ª–∞ —Ä–æ—Å—Ç–∞ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞
    /// </summary>
    [ContextMenu("–¢–µ—Å—Ç —Ñ–æ—Ä–º—É–ª—ã –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞")]
    public void TestMultiplierFormula()
    {
        Debug.Log("\nüßÆ –¢–ï–°–¢ 1: –§–û–†–ú–£–õ–ê –†–û–°–¢–ê –ú–£–õ–¨–¢–ò–ü–õ–ò–ö–ê–¢–û–†–ê");
        Debug.Log("-".PadRight(50, '-'));
        
        float[] testTimes = { 0f, 8f, 35f, 50f, 80f, 120f };
        float[] expectedValues = { 1.00f, 2.00f, 20.00f, 100.00f, 500.00f, 1000.00f };
        
        bool allPassed = true;
        int passedTests = 0;
        
        for (int i = 0; i < testTimes.Length; i++)
        {
            float calculated = MultiplierCalculator.CalculateMultiplier(testTimes[i]);
            float expected = expectedValues[i];
            float difference = Mathf.Abs(calculated - expected);
            float accuracy = (1f - difference / expected) * 100f;
            
            string status = accuracy > 95f ? "‚úÖ" : "‚ùå";
            Debug.Log($"{status} t={testTimes[i]:F1}s: –û–∂–∏–¥–∞–µ—Ç—Å—è={expected:F2}, –í—ã—á–∏—Å–ª–µ–Ω–æ={calculated:F2}, –¢–æ—á–Ω–æ—Å—Ç—å={accuracy:F1}%");
            
            if (accuracy > 95f) passedTests++;
            else allPassed = false;
        }
        
        Debug.Log($"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passedTests}/{testTimes.Length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ");
        Debug.Log(allPassed ? "‚úÖ –¢–ï–°–¢ 1 –ü–†–û–ô–î–ï–ù" : "‚ùå –¢–ï–°–¢ 1 –ù–ï –ü–†–û–ô–î–ï–ù");
    }
    
    /// <summary>
    /// –¢–µ—Å—Ç 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –∫—Ä–∞—à–∞
    /// </summary>
    [ContextMenu("–¢–µ—Å—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä–∞—à–µ–π")]
    public void TestCrashDistribution()
    {
        Debug.Log("\nüé≤ –¢–ï–°–¢ 2: –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–û–ß–ï–ö –ö–†–ê–®–ê");
        Debug.Log("-".PadRight(50, '-'));
        
        int sampleSize = 10000;
        int[] buckets = new int[7];
        float[] bucketRanges = { 1.01f, 2.0f, 5.0f, 10.0f, 20.0f, 50.0f, 100.0f, 1000.0f };
        float[] expectedPercentages = { 47.05f, 28.56f, 9.56f, 4.79f, 2.88f, 0.96f, 0.96f };
        
        Debug.Log($"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {sampleSize:N0} —Ç–æ—á–µ–∫ –∫—Ä–∞—à–∞...");
        
        for (int i = 0; i < sampleSize; i++)
        {
            float crashPoint = CrashPointGenerator.GenerateCrashPoint();
            
            for (int j = 0; j < bucketRanges.Length - 1; j++)
            {
                if (crashPoint >= bucketRanges[j] && crashPoint < bucketRanges[j + 1])
                {
                    buckets[j]++;
                    break;
                }
            }
        }
        
        Debug.Log("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∞—à–µ–π:");
        bool distributionCorrect = true;
        
        for (int i = 0; i < buckets.Length; i++)
        {
            float percentage = (float)buckets[i] / sampleSize * 100f;
            float expected = expectedPercentages[i];
            float difference = Mathf.Abs(percentage - expected);
            bool correct = difference < 2f; // –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ 2%
            
            string status = correct ? "‚úÖ" : "‚ùå";
            Debug.Log($"{status} {bucketRanges[i]:F2}-{bucketRanges[i + 1]:F2}: {buckets[i]} ({percentage:F1}%) [–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected:F1}%]");
            
            if (!correct) distributionCorrect = false;
        }
        
        Debug.Log(distributionCorrect ? "‚úÖ –¢–ï–°–¢ 2 –ü–†–û–ô–î–ï–ù" : "‚ùå –¢–ï–°–¢ 2 –ù–ï –ü–†–û–ô–î–ï–ù");
    }
    
    /// <summary>
    /// –¢–µ—Å—Ç 3: RTP (Return to Player)
    /// </summary>
    [ContextMenu("–¢–µ—Å—Ç RTP")]
    public void TestRTP()
    {
        Debug.Log("\nüí∞ –¢–ï–°–¢ 3: RTP (RETURN TO PLAYER)");
        Debug.Log("-".PadRight(50, '-'));
        
        Debug.Log($"–ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞ {rtpTestRounds:N0} —Ä–∞—É–Ω–¥–æ–≤...");
        
        var result = RTPValidator.ValidateRTP(rtpTestRounds);
        
        Debug.Log($"–¶–µ–ª–µ–≤–æ–π RTP: 96.00%");
        Debug.Log($"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π RTP: {result.actualRTP:P4}");
        Debug.Log($"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {Mathf.Abs(result.actualRTP - 0.96f):P4}");
        Debug.Log($"–í–∏–Ω—Ä–µ–π—Ç: {result.successRate:P2}");
        Debug.Log($"–í—Å–µ–≥–æ –∏–≥—Ä: {(result.successfulGames + result.failedGames):N0}");
        Debug.Log($"–£—Å–ø–µ—à–Ω—ã—Ö: {result.successfulGames:N0}");
        Debug.Log($"–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö: {result.failedGames:N0}");
        Debug.Log($"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–∞—à: x{result.maxCrashPoint:F2}");
        Debug.Log($"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {result.maxWin:F2}");
        Debug.Log($"–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {result.testDuration:F2}—Å");
        
        bool rtpCorrect = Mathf.Abs(result.actualRTP - 0.96f) < 0.01f; // –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ 1%
        Debug.Log(rtpCorrect ? "‚úÖ –¢–ï–°–¢ 3 –ü–†–û–ô–î–ï–ù" : "‚ùå –¢–ï–°–¢ 3 –ù–ï –ü–†–û–ô–î–ï–ù");
    }
    
    /// <summary>
    /// –¢–µ—Å—Ç 4: –û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    /// </summary>
    [ContextMenu("–¢–µ—Å—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")]
    public void TestExpectedValues()
    {
        Debug.Log("\nüìà –¢–ï–°–¢ 4: –û–ñ–ò–î–ê–ï–ú–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø");
        Debug.Log("-".PadRight(50, '-'));
        
        float[] testMultipliers = { 1.5f, 2.0f, 3.0f, 5.0f, 10.0f, 20.0f };
        bool allCorrect = true;
        
        Debug.Log("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ E[payout] = 0.96 –¥–ª—è –ª—é–±–æ–≥–æ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞:");
        
        foreach (float multiplier in testMultipliers)
        {
            float expectedValue = CrashPointGenerator.GetExpectedValue(multiplier);
            bool correct = Mathf.Abs(expectedValue - 0.96f) < 0.001f;
            string status = correct ? "‚úÖ" : "‚ùå";
            Debug.Log($"{status} x{multiplier:F1}: E[payout] = {expectedValue:F4} (—Ü–µ–ª—å: 0.9600)");
            
            if (!correct) allCorrect = false;
        }
        
        Debug.Log(allCorrect ? "‚úÖ –¢–ï–°–¢ 4 –ü–†–û–ô–î–ï–ù" : "‚ùå –¢–ï–°–¢ 4 –ù–ï –ü–†–û–ô–î–ï–ù");
    }
    
    /// <summary>
    /// –¢–µ—Å—Ç 5: –û–±—Ä–∞—Ç–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    /// </summary>
    [ContextMenu("–¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")]
    public void TestReverseCalculation()
    {
        Debug.Log("\nüîÑ –¢–ï–°–¢ 5: –û–ë–†–ê–¢–ù–û–ï –í–´–ß–ò–°–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò");
        Debug.Log("-".PadRight(50, '-'));
        
        float[] targetMultipliers = { 2.0f, 5.0f, 10.0f, 20.0f, 50.0f };
        bool allCorrect = true;
        
        Debug.Log("–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏:");
        
        foreach (float target in targetMultipliers)
        {
            float time = MultiplierCalculator.CalculateTimeForMultiplier(target);
            float calculatedMultiplier = MultiplierCalculator.CalculateMultiplier(time);
            float difference = Mathf.Abs(calculatedMultiplier - target);
            bool correct = difference < 0.1f; // –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.1
            
            string status = correct ? "‚úÖ" : "‚ùå";
            Debug.Log($"{status} –¶–µ–ª—å: x{target:F1} | –í—Ä–µ–º—è: {time:F2}—Å | –†–µ–∑—É–ª—å—Ç–∞—Ç: x{calculatedMultiplier:F2} | –†–∞–∑–Ω–∏—Ü–∞: {difference:F3}");
            
            if (!correct) allCorrect = false;
        }
        
        Debug.Log(allCorrect ? "‚úÖ –¢–ï–°–¢ 5 –ü–†–û–ô–î–ï–ù" : "‚ùå –¢–ï–°–¢ 5 –ù–ï –ü–†–û–ô–î–ï–ù");
    }
    
    /// <summary>
    /// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    /// </summary>
    [ContextMenu("–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç")]
    public void QuickTest()
    {
        Debug.Log("‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢ (–æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
        float multiplier1 = MultiplierCalculator.CalculateMultiplier(8f);
        float multiplier2 = MultiplierCalculator.CalculateMultiplier(35f);
        float multiplier3 = MultiplierCalculator.CalculateMultiplier(50f);
        
        Debug.Log($"t=8s: x{multiplier1:F2} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: x2.00)");
        Debug.Log($"t=35s: x{multiplier2:F2} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: x20.00)");
        Debug.Log($"t=50s: x{multiplier3:F2} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: x100.00)");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –∫—Ä–∞—à–∞
        for (int i = 0; i < 5; i++)
        {
            float crashPoint = CrashPointGenerator.GenerateCrashPoint();
            Debug.Log($"–ö—Ä–∞—à {i + 1}: x{crashPoint:F2}");
        }
        
        // –ë—ã—Å—Ç—Ä—ã–π RTP —Ç–µ—Å—Ç
        var result = RTPValidator.ValidateRTP(1000);
        Debug.Log($"–ë—ã—Å—Ç—Ä—ã–π RTP —Ç–µ—Å—Ç: {result.actualRTP:P4}");
    }
    
    /// <summary>
    /// –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç RTP (1,000,000 —Ä–∞—É–Ω–¥–æ–≤)
    /// </summary>
    [ContextMenu("–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç RTP")]
    public void FullRTPTest()
    {
        Debug.Log("üî¨ –ü–û–õ–ù–´–ô –¢–ï–°–¢ RTP (1,000,000 —Ä–∞—É–Ω–¥–æ–≤)");
        Debug.Log("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...");
        
        var result = RTPValidator.ValidateRTP(1000000);
        RTPValidator.PrintValidationReport(result);
    }
} 