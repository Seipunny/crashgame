using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.Collections;
using System.Collections.Generic;

/// <summary>
/// –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫—Ä–∞—à-–∏–≥—Ä—ã —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º UI –∏ —Ä–∞—É–Ω–¥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
/// </summary>
public class CrashGameImproved : MonoBehaviour
{
    [Header("UI Elements")]
    public TextMeshProUGUI multiplierText;
    public TextMeshProUGUI balanceText;
    public TextMeshProUGUI betText;
    public TextMeshProUGUI statusText;
    public TextMeshProUGUI historyText;
    public TextMeshProUGUI countdownText;
    public TextMeshProUGUI roundInfoText;
    
    [Header("Buttons")]
    public Button placeBetButton;
    public Button cashoutButton;
    public Button increaseBetButton;
    public Button decreaseBetButton;
    public Button cancelBetButton;
    
    [Header("UI Panels")]
    public GameObject gamePanel;
    public GameObject historyPanel;
    public GameObject bettingPanel;
    public GameObject countdownPanel;
    
    [Header("Game Settings")]
    public float playerBalance = 1000f;
    public float currentBet = 10f;
    public float minBet = 1f;
    public float maxBet = 100f;
    public float betStep = 5f;
    
    [Header("Round Settings")]
    public float bettingTime = 5f;
    public float roundDelay = 2f;
    public float maxGameTime = 60f;
    
    [Header("Game State")]
    public bool isGameRunning = false;
    public bool hasPlacedBet = false;
    public bool isBettingPhase = false;
    public float currentMultiplier = 1.0f;
    public float crashPoint = 1.0f;
    public float gameTime = 0f;
    public float bettingTimeLeft = 0f;
    public int currentRound = 0;
    
    [Header("History")]
    public List<string> gameHistory = new List<string>();
    public int maxHistoryItems = 10;
    
    [Header("Mobile UI")]
    public bool isMobile = false;
    public CanvasScaler canvasScaler;
    
    private Coroutine gameCoroutine;
    private Coroutine bettingCoroutine;
    private Coroutine countdownCoroutine;
    
    private void Start()
    {
        SetupUI();
        DetectMobile();
        UpdateUI();
        StartNewRound();
    }
    
    private void SetupUI()
    {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
        if (placeBetButton != null)
            placeBetButton.onClick.AddListener(PlaceBet);
        
        if (cashoutButton != null)
            cashoutButton.onClick.AddListener(Cashout);
        
        if (increaseBetButton != null)
            increaseBetButton.onClick.AddListener(IncreaseBet);
        
        if (decreaseBetButton != null)
            decreaseBetButton.onClick.AddListener(DecreaseBet);
        
        if (cancelBetButton != null)
            cancelBetButton.onClick.AddListener(CancelBet);
        
        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        SetButtonStates(false);
        SetPanelStates(false);
    }
    
    private void DetectMobile()
    {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        isMobile = Application.isMobilePlatform || Screen.width < 800;
        
        if (canvasScaler != null)
        {
            if (isMobile)
            {
                canvasScaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
                canvasScaler.referenceResolution = new Vector2(375, 812); // iPhone X
                canvasScaler.screenMatchMode = CanvasScaler.ScreenMatchMode.MatchWidthOrHeight;
                canvasScaler.matchWidthOrHeight = 0.5f;
            }
            else
            {
                canvasScaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
                canvasScaler.referenceResolution = new Vector2(1920, 1080);
                canvasScaler.screenMatchMode = CanvasScaler.ScreenMatchMode.MatchWidthOrHeight;
                canvasScaler.matchWidthOrHeight = 0.5f;
            }
        }
        
        Debug.Log($"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {(isMobile ? "–ú–æ–±–∏–ª—å–Ω–æ–µ" : "–î–µ—Å–∫—Ç–æ–ø")}");
    }
    
    private void Update()
    {
        if (isGameRunning)
        {
            UpdateGame();
        }
        
        if (isBettingPhase)
        {
            UpdateBettingPhase();
        }
    }
    
    private void UpdateGame()
    {
        gameTime += Time.deltaTime;
        currentMultiplier = MultiplierCalculator.CalculateMultiplier(gameTime);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Ç–æ—á–∫–∏ –∫—Ä–∞—à–∞
        if (currentMultiplier >= crashPoint)
        {
            Crash();
        }
        
        UpdateUI();
    }
    
    private void UpdateBettingPhase()
    {
        if (bettingTimeLeft > 0)
        {
            bettingTimeLeft -= Time.deltaTime;
            
            if (countdownText != null)
            {
                countdownText.text = $"–í—Ä–µ–º—è –Ω–∞ —Å—Ç–∞–≤–∫—É: {bettingTimeLeft:F1}s";
            }
            
            if (bettingTimeLeft <= 0)
            {
                EndBettingPhase();
            }
        }
    }
    
    private void UpdateUI()
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã
        if (multiplierText != null)
            multiplierText.text = $"x{currentMultiplier:F2}";
        
        if (balanceText != null)
            balanceText.text = $"–ë–∞–ª–∞–Ω—Å: {playerBalance:F0}";
        
        if (betText != null)
            betText.text = $"–°—Ç–∞–≤–∫–∞: {currentBet:F0}";
        
        if (roundInfoText != null)
            roundInfoText.text = $"–†–∞—É–Ω–¥ #{currentRound}";
        
        if (statusText != null)
        {
            if (isGameRunning)
                statusText.text = "–ò–≥—Ä–∞ –∏–¥–µ—Ç...";
            else if (isBettingPhase)
                statusText.text = "–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Å—Ç–∞–≤–∫—É";
            else if (hasPlacedBet)
                statusText.text = "–ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ";
            else
                statusText.text = "–û–∂–∏–¥–∞–Ω–∏–µ...";
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        UpdateHistoryUI();
    }
    
    private void UpdateHistoryUI()
    {
        if (historyText != null)
        {
            string history = "–ò—Å—Ç–æ—Ä–∏—è:\n";
            for (int i = gameHistory.Count - 1; i >= 0 && i >= gameHistory.Count - maxHistoryItems; i--)
            {
                history += gameHistory[i] + "\n";
            }
            historyText.text = history;
        }
    }
    
    public void PlaceBet()
    {
        if (!isBettingPhase || hasPlacedBet) return;
        
        if (currentBet > playerBalance)
        {
            Debug.Log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!");
            return;
        }
        
        playerBalance -= currentBet;
        hasPlacedBet = true;
        SetButtonStates(true);
        
        Debug.Log($"–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞: {currentBet}");
        UpdateUI();
    }
    
    public void CancelBet()
    {
        if (!isBettingPhase || !hasPlacedBet) return;
        
        playerBalance += currentBet;
        hasPlacedBet = false;
        SetButtonStates(false);
        
        Debug.Log("–°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
        UpdateUI();
    }
    
    public void Cashout()
    {
        if (!isGameRunning || !hasPlacedBet) return;
        
        float winAmount = currentBet * currentMultiplier;
        playerBalance += winAmount;
        
        AddToHistory($"WIN x{currentMultiplier:F2}");
        
        Debug.Log($"–ö–µ—à–∞—É—Ç! –í—ã–∏–≥—Ä—ã—à: {winAmount:F2}");
        
        EndRound();
    }
    
    public void IncreaseBet()
    {
        if (isGameRunning || hasPlacedBet) return;
        
        currentBet = Mathf.Min(currentBet + betStep, maxBet);
        UpdateUI();
    }
    
    public void DecreaseBet()
    {
        if (isGameRunning || hasPlacedBet) return;
        
        currentBet = Mathf.Max(currentBet - betStep, minBet);
        UpdateUI();
    }
    
    private void StartNewRound()
    {
        currentRound++;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –∫—Ä–∞—à–∞
        crashPoint = CrashPointGenerator.GenerateCrashPoint();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        isGameRunning = false;
        hasPlacedBet = false;
        currentMultiplier = 1.0f;
        gameTime = 0f;
        
        SetButtonStates(false);
        SetPanelStates(false);
        UpdateUI();
        
        Debug.Log($"–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ #{currentRound}. –ö—Ä–∞—à: x{crashPoint:F2}");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–∑—É —Å—Ç–∞–≤–æ–∫
        StartBettingPhase();
    }
    
    private void StartBettingPhase()
    {
        isBettingPhase = true;
        bettingTimeLeft = bettingTime;
        SetPanelStates(true);
        
        Debug.Log($"–§–∞–∑–∞ —Å—Ç–∞–≤–æ–∫ –Ω–∞—á–∞–ª–∞—Å—å. –í—Ä–µ–º—è: {bettingTime}s");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É —Ñ–∞–∑—ã —Å—Ç–∞–≤–æ–∫
        bettingCoroutine = StartCoroutine(BettingPhaseCoroutine());
    }
    
    private IEnumerator BettingPhaseCoroutine()
    {
        while (bettingTimeLeft > 0)
        {
            yield return null;
        }
        
        EndBettingPhase();
    }
    
    private void EndBettingPhase()
    {
        isBettingPhase = false;
        SetPanelStates(false);
        
        if (bettingCoroutine != null)
        {
            StopCoroutine(bettingCoroutine);
            bettingCoroutine = null;
        }
        
        Debug.Log("–§–∞–∑–∞ —Å—Ç–∞–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        if (hasPlacedBet)
        {
            StartCoroutine(StartGameWithDelay());
        }
        else
        {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞–≤–∫–∏, —Å—Ä–∞–∑—É –∫—Ä–∞—à
            AddToHistory($"SKIP x{crashPoint:F2}");
            StartCoroutine(StartNewRoundWithDelay());
        }
    }
    
    private IEnumerator StartGameWithDelay()
    {
        yield return new WaitForSeconds(roundDelay);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        isGameRunning = true;
        gameCoroutine = StartCoroutine(GameLoop());
        
        Debug.Log("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!");
    }
    
    private IEnumerator GameLoop()
    {
        // –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ –∫—Ä–∞—à–∞ –∏–ª–∏ –∫–µ—à–∞—É—Ç–∞
        while (isGameRunning && gameTime < maxGameTime)
        {
            yield return null;
        }
        
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –Ω–æ –∏–≥—Ä–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
        if (isGameRunning)
        {
            Crash();
        }
    }
    
    private void Crash()
    {
        isGameRunning = false;
        
        if (hasPlacedBet)
        {
            AddToHistory($"CRASH x{crashPoint:F2}");
            Debug.Log($"–ö—Ä–∞—à! x{crashPoint:F2}");
        }
        
        EndRound();
    }
    
    private void EndRound()
    {
        hasPlacedBet = false;
        SetButtonStates(false);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –∏–≥—Ä—ã
        if (gameCoroutine != null)
        {
            StopCoroutine(gameCoroutine);
            gameCoroutine = null;
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—É–Ω–¥–æ–º
        StartCoroutine(StartNewRoundWithDelay());
    }
    
    private IEnumerator StartNewRoundWithDelay()
    {
        yield return new WaitForSeconds(roundDelay);
        StartNewRound();
    }
    
    private void SetButtonStates(bool gameActive)
    {
        if (placeBetButton != null)
            placeBetButton.interactable = isBettingPhase && !hasPlacedBet;
        
        if (cashoutButton != null)
            cashoutButton.interactable = gameActive && hasPlacedBet;
        
        if (increaseBetButton != null)
            increaseBetButton.interactable = isBettingPhase && !hasPlacedBet;
        
        if (decreaseBetButton != null)
            decreaseBetButton.interactable = isBettingPhase && !hasPlacedBet;
        
        if (cancelBetButton != null)
            cancelBetButton.interactable = isBettingPhase && hasPlacedBet;
    }
    
    private void SetPanelStates(bool bettingPhase)
    {
        if (bettingPanel != null)
            bettingPanel.SetActive(bettingPhase);
        
        if (countdownPanel != null)
            countdownPanel.SetActive(bettingPhase);
        
        if (gamePanel != null)
            gamePanel.SetActive(isGameRunning);
        
        if (historyPanel != null)
            historyPanel.SetActive(!isGameRunning && !bettingPhase);
    }
    
    private void AddToHistory(string result)
    {
        gameHistory.Add(result);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
        if (gameHistory.Count > maxHistoryItems)
        {
            gameHistory.RemoveAt(0);
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    [ContextMenu("–ê–≤—Ç–æ-—Å—Ç–∞–≤–∫–∞")]
    public void AutoBet()
    {
        if (isBettingPhase && !hasPlacedBet)
        {
            PlaceBet();
        }
    }
    
    [ContextMenu("–ê–≤—Ç–æ-–∫–µ—à–∞—É—Ç –Ω–∞ x2")]
    public void AutoCashoutAt2x()
    {
        if (isGameRunning && hasPlacedBet && currentMultiplier >= 2.0f)
        {
            Cashout();
        }
    }
} 