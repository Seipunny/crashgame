using UnityEngine;
using UnityEngine.UI;
using TMPro;

/// <summary>
/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è UI –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞
/// </summary>
public class UISetupHelper : MonoBehaviour
{
    [Header("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")]
    public bool autoSetupOnStart = true;
    
    private void Start()
    {
        if (autoSetupOnStart)
        {
            SetupPrototypeUI();
        }
    }
    
    [ContextMenu("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å UI –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞")]
    public void SetupPrototypeUI()
    {
        Debug.Log("üé® –ù–ê–°–¢–†–û–ô–ö–ê UI –ü–†–û–¢–û–¢–ò–ü–ê");
        Debug.Log("=".PadRight(50, '='));
        
        CreateUIElements();
        SetupPrototypeScript();
        
        Debug.Log("‚úÖ UI –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!");
        Debug.Log("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–≥—Ä—É.");
    }
    
    private void CreateUIElements()
    {
        Debug.Log("üì± –°–æ–∑–¥–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã...");
        
        // –°–æ–∑–¥–∞–µ–º Canvas –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        Canvas canvas = FindObjectOfType<Canvas>();
        if (canvas == null)
        {
            GameObject canvasObj = new GameObject("Canvas");
            canvas = canvasObj.AddComponent<Canvas>();
            canvas.renderMode = RenderMode.ScreenSpaceOverlay;
            canvasObj.AddComponent<CanvasScaler>();
            canvasObj.AddComponent<GraphicRaycaster>();
            Debug.Log("‚úÖ Canvas —Å–æ–∑–¥–∞–Ω");
        }
        
        // –°–æ–∑–¥–∞–µ–º EventSystem –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (FindObjectOfType<UnityEngine.EventSystems.EventSystem>() == null)
        {
            GameObject eventSystemObj = new GameObject("EventSystem");
            eventSystemObj.AddComponent<UnityEngine.EventSystems.EventSystem>();
            eventSystemObj.AddComponent<UnityEngine.EventSystems.StandaloneInputModule>();
            Debug.Log("‚úÖ EventSystem —Å–æ–∑–¥–∞–Ω");
        }
        
        // –°–æ–∑–¥–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
        CreateMultiplierText(canvas);
        CreateButtons(canvas);
        CreateInfoTexts(canvas);
        
        Debug.Log("‚úÖ –í—Å–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã");
    }
    
    private void CreateMultiplierText(Canvas canvas)
    {
        GameObject multiplierObj = new GameObject("MultiplierText");
        multiplierObj.transform.SetParent(canvas.transform, false);
        
        TextMeshProUGUI multiplierText = multiplierObj.AddComponent<TextMeshProUGUI>();
        multiplierText.text = "x1.00";
        multiplierText.fontSize = 72;
        multiplierText.color = Color.white;
        multiplierText.alignment = TextAlignmentOptions.Center;
        
        RectTransform rect = multiplierObj.GetComponent<RectTransform>();
        rect.anchorMin = new Vector2(0.5f, 0.5f);
        rect.anchorMax = new Vector2(0.5f, 0.5f);
        rect.anchoredPosition = Vector2.zero;
        rect.sizeDelta = new Vector2(400, 100);
        
        Debug.Log("‚úÖ MultiplierText —Å–æ–∑–¥–∞–Ω");
    }
    
    private void CreateButtons(Canvas canvas)
    {
        // Place Bet Button
        CreateButton(canvas, "PlaceBetButton", "–°–¢–ê–í–ö–ê", new Vector2(-200, -200));
        
        // Cashout Button
        CreateButton(canvas, "CashoutButton", "–ö–ï–®–ê–£–¢", new Vector2(200, -200));
        
        // Increase Bet Button
        CreateButton(canvas, "IncreaseBetButton", "+", new Vector2(-100, -300));
        
        // Decrease Bet Button
        CreateButton(canvas, "DecreaseBetButton", "-", new Vector2(100, -300));
        
        Debug.Log("‚úÖ –ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã");
    }
    
    private void CreateButton(Canvas canvas, string name, string text, Vector2 position)
    {
        GameObject buttonObj = new GameObject(name);
        buttonObj.transform.SetParent(canvas.transform, false);
        
        Image buttonImage = buttonObj.AddComponent<Image>();
        buttonImage.color = new Color(0.2f, 0.2f, 0.2f, 1f);
        
        Button button = buttonObj.AddComponent<Button>();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        GameObject textObj = new GameObject("Text");
        textObj.transform.SetParent(buttonObj.transform, false);
        
        TextMeshProUGUI buttonText = textObj.AddComponent<TextMeshProUGUI>();
        buttonText.text = text;
        buttonText.fontSize = 24;
        buttonText.color = Color.white;
        buttonText.alignment = TextAlignmentOptions.Center;
        
        RectTransform textRect = textObj.GetComponent<RectTransform>();
        textRect.anchorMin = Vector2.zero;
        textRect.anchorMax = Vector2.one;
        textRect.offsetMin = Vector2.zero;
        textRect.offsetMax = Vector2.zero;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–Ω–æ–ø–∫–∏
        RectTransform buttonRect = buttonObj.GetComponent<RectTransform>();
        buttonRect.anchorMin = new Vector2(0.5f, 0.5f);
        buttonRect.anchorMax = new Vector2(0.5f, 0.5f);
        buttonRect.anchoredPosition = position;
        buttonRect.sizeDelta = new Vector2(120, 50);
    }
    
    private void CreateInfoTexts(Canvas canvas)
    {
        // Balance Text
        CreateInfoText(canvas, "BalanceText", "–ë–∞–ª–∞–Ω—Å: 1000", new Vector2(-300, 200));
        
        // Bet Text
        CreateInfoText(canvas, "BetText", "–°—Ç–∞–≤–∫–∞: 10", new Vector2(300, 200));
        
        // Status Text
        CreateInfoText(canvas, "StatusText", "–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Å—Ç–∞–≤–∫—É", new Vector2(0, 150));
        
        // History Text
        CreateInfoText(canvas, "HistoryText", "–ò—Å—Ç–æ—Ä–∏—è:", new Vector2(0, -100));
        
        Debug.Log("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã");
    }
    
    private void CreateInfoText(Canvas canvas, string name, string text, Vector2 position)
    {
        GameObject textObj = new GameObject(name);
        textObj.transform.SetParent(canvas.transform, false);
        
        TextMeshProUGUI infoText = textObj.AddComponent<TextMeshProUGUI>();
        infoText.text = text;
        infoText.fontSize = 18;
        infoText.color = Color.white;
        infoText.alignment = TextAlignmentOptions.Center;
        
        RectTransform rect = textObj.GetComponent<RectTransform>();
        rect.anchorMin = new Vector2(0.5f, 0.5f);
        rect.anchorMax = new Vector2(0.5f, 0.5f);
        rect.anchoredPosition = position;
        rect.sizeDelta = new Vector2(300, 50);
    }
    
    private void SetupPrototypeScript()
    {
        Debug.Log("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞...");
        
        CrashGamePrototype prototype = FindObjectOfType<CrashGamePrototype>();
        if (prototype == null)
        {
            Debug.LogWarning("‚ö†Ô∏è CrashGamePrototype –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–µ");
            return;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º UI —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏—Ö —Å–∫—Ä–∏–ø—Ç—É
        TextMeshProUGUI[] texts = FindObjectsOfType<TextMeshProUGUI>();
        Button[] buttons = FindObjectsOfType<Button>();
        
        foreach (TextMeshProUGUI text in texts)
        {
            switch (text.name)
            {
                case "MultiplierText":
                    prototype.multiplierText = text;
                    break;
                case "BalanceText":
                    prototype.balanceText = text;
                    break;
                case "BetText":
                    prototype.betText = text;
                    break;
                case "StatusText":
                    prototype.statusText = text;
                    break;
                case "HistoryText":
                    prototype.historyText = text;
                    break;
            }
        }
        
        foreach (Button button in buttons)
        {
            switch (button.name)
            {
                case "PlaceBetButton":
                    prototype.placeBetButton = button;
                    break;
                case "CashoutButton":
                    prototype.cashoutButton = button;
                    break;
                case "IncreaseBetButton":
                    prototype.increaseBetButton = button;
                    break;
                case "DecreaseBetButton":
                    prototype.decreaseBetButton = button;
                    break;
            }
        }
        
        Debug.Log("‚úÖ –°–∫—Ä–∏–ø—Ç –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
    }
} 