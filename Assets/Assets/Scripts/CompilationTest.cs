using UnityEngine;

/// <summary>
/// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
/// </summary>
public class CompilationTest : MonoBehaviour
{
    private void Start()
    {
        Debug.Log("üîß –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–ò–õ–Ø–¶–ò–ò –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ú–û–î–ï–õ–ò");
        Debug.Log("=".PadRight(50, '='));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª–∞—Å—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        TestMultiplierCalculator();
        TestCrashPointGenerator();
        TestRTPValidator();
        
        Debug.Log("‚úÖ –ö–û–ú–ü–ò–õ–Ø–¶–ò–Ø –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û!");
        Debug.Log("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã.");
    }
    
    private void TestMultiplierCalculator()
    {
        Debug.Log("üßÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º MultiplierCalculator...");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        float multiplier1 = MultiplierCalculator.CalculateMultiplier(8f);
        float multiplier2 = MultiplierCalculator.CalculateMultiplier(35f);
        float multiplier3 = MultiplierCalculator.CalculateMultiplier(50f);
        
        Debug.Log($"  t=8s: x{multiplier1:F2}");
        Debug.Log($"  t=35s: x{multiplier2:F2}");
        Debug.Log($"  t=50s: x{multiplier3:F2}");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
        float time1 = MultiplierCalculator.CalculateTimeForMultiplier(2f);
        float time2 = MultiplierCalculator.CalculateTimeForMultiplier(10f);
        
        Debug.Log($"  –í—Ä–µ–º—è –¥–ª—è x2.0: {time1:F2}—Å");
        Debug.Log($"  –í—Ä–µ–º—è –¥–ª—è x10.0: {time2:F2}—Å");
        
        Debug.Log("‚úÖ MultiplierCalculator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }
    
    private void TestCrashPointGenerator()
    {
        Debug.Log("üé≤ –¢–µ—Å—Ç–∏—Ä—É–µ–º CrashPointGenerator...");
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –∫—Ä–∞—à–∞
        for (int i = 0; i < 5; i++)
        {
            float crashPoint = CrashPointGenerator.GenerateCrashPoint();
            Debug.Log($"  –ö—Ä–∞—à {i + 1}: x{crashPoint:F2}");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        float expectedValue1 = CrashPointGenerator.GetExpectedValue(2.0f);
        float expectedValue2 = CrashPointGenerator.GetExpectedValue(5.0f);
        
        Debug.Log($"  E[payout] –¥–ª—è x2.0: {expectedValue1:F4}");
        Debug.Log($"  E[payout] –¥–ª—è x5.0: {expectedValue2:F4}");
        
        Debug.Log("‚úÖ CrashPointGenerator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }
    
    private void TestRTPValidator()
    {
        Debug.Log("üí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º RTPValidator...");
        
        // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç RTP
        var result = RTPValidator.ValidateRTP(1000);
        
        Debug.Log($"  RTP —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.actualRTP:P4}");
        Debug.Log($"  –í–∏–Ω—Ä–µ–π—Ç: {result.successRate:P2}");
        Debug.Log($"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–∞—à: x{result.maxCrashPoint:F2}");
        
        Debug.Log("‚úÖ RTPValidator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }
} 