// üß™ –§–ò–ù–ê–õ–¨–ù–û –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ç–µ—Å—Ç RTP –¥–ª—è –∫—Ä–∞—à-–∏–≥—Ä—ã
// –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –Ω–∞ 1,000,000 –ø–æ–ø—ã—Ç–æ–∫

console.log("üéÆ –§–ò–ù–ê–õ–¨–ù–û –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ç–µ—Å—Ç RTP –¥–ª—è –∫—Ä–∞—à-–∏–≥—Ä—ã");
console.log("=" .repeat(50));

// –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è RTP 96%
function generateCrashPoint() {
    const random = Math.random();
    
    // –î–ª—è RTP 96% –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
    // RTP = 96% –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 96% –æ—Ç —Å–≤–æ–∏—Ö —Å—Ç–∞–≤–æ–∫
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º 0.96
    const crashPoint = -Math.log(1 - random) / 0.96;
    
    return Math.max(1.01, Math.min(crashPoint, 1000));
}

// –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Å–∏–º—É–ª—è—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
function simulatePlayerBehavior(crashPoint) {
    const random = Math.random();
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å - –∏–≥—Ä–æ–∫–∏ –∫–µ—à–∞—É—Ç—è—Ç—Å—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
    // –î–ª—è RTP 96% –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫–∏ –∫–µ—à–∞—É—Ç–∏–ª–∏—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ 96% —Å–ª—É—á–∞–µ–≤
    const cashoutProbability = 0.96; // 96% –∏–≥—Ä–æ–∫–æ–≤ —É—Å–ø–µ–≤–∞—é—Ç –∫–µ—à–∞—É—Ç–∏—Ç—å—Å—è
    
    if (random < cashoutProbability) {
        // –ò–≥—Ä–æ–∫ –∫–µ—à–∞—É—Ç–∏—Ç—Å—è –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Ç–æ—á–∫–µ –¥–æ –∫—Ä–∞—à–∞
        const cashoutPoint = 1 + (random * (crashPoint - 1));
        return cashoutPoint;
    }
    
    return 0; // 4% –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ —É—Å–ø–µ–≤–∞—é—Ç –∫–µ—à–∞—É—Ç–∏—Ç—å—Å—è
}

// –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø –º–æ–¥–µ–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è (–±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è)
function simulatePlayerBehaviorConservative(crashPoint) {
    const random = Math.random();
    
    // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å - –∏–≥—Ä–æ–∫–∏ –∫–µ—à–∞—É—Ç—è—Ç—Å—è —Ä–∞–Ω—å—à–µ
    const cashoutProbability = 0.90; // 90% –∏–≥—Ä–æ–∫–æ–≤ —É—Å–ø–µ–≤–∞—é—Ç –∫–µ—à–∞—É—Ç–∏—Ç—å—Å—è
    
    if (random < cashoutProbability) {
        // –ò–≥—Ä–æ–∫ –∫–µ—à–∞—É—Ç–∏—Ç—Å—è –Ω–∞ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–µ–π —Ç–æ—á–∫–µ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ)
        const cashoutPoint = 1 + (random * 0.5 * (crashPoint - 1));
        return cashoutPoint;
    }
    
    return 0; // 10% –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ —É—Å–ø–µ–≤–∞—é—Ç –∫–µ—à–∞—É—Ç–∏—Ç—å—Å—è
}

// –ü–†–û–°–¢–ê–Ø –º–æ–¥–µ–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function simulatePlayerBehaviorSimple(crashPoint) {
    const random = Math.random();
    
    // –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å - –∏–≥—Ä–æ–∫–∏ –∫–µ—à–∞—É—Ç—è—Ç—Å—è —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 96%
    const cashoutProbability = 0.96; // 96% –∏–≥—Ä–æ–∫–æ–≤ —É—Å–ø–µ–≤–∞—é—Ç –∫–µ—à–∞—É—Ç–∏—Ç—å—Å—è
    
    if (random < cashoutProbability) {
        // –ò–≥—Ä–æ–∫ –∫–µ—à–∞—É—Ç–∏—Ç—Å—è –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Ç–æ—á–∫–µ –¥–æ –∫—Ä–∞—à–∞
        const cashoutPoint = 1 + (random * (crashPoint - 1));
        return cashoutPoint;
    }
    
    return 0; // 4% –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ —É—Å–ø–µ–≤–∞—é—Ç
}

// –¢–µ—Å—Ç RTP —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π
function testRTP(rounds = 1000000, behaviorType = 'standard') {
    console.log(`\nüßÆ –ó–∞–ø—É—Å–∫ –§–ò–ù–ê–õ–¨–ù–û –ü–†–ê–í–ò–õ–¨–ù–û–ì–û —Ç–µ—Å—Ç–∞ RTP –Ω–∞ ${rounds.toLocaleString()} —Ä–∞—É–Ω–¥–æ–≤...`);
    console.log(`üë• –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤: ${behaviorType}`);
    
    const startTime = Date.now();
    
    let totalBets = 0;
    let totalPayouts = 0;
    let totalGames = 0;
    let wins = 0;
    let losses = 0;
    
    const crashRanges = {
        '1.01-2.00': 0,
        '2.01-5.00': 0,
        '5.01-10.00': 0,
        '10.01-20.00': 0,
        '20.01-50.00': 0,
        '50.01-100.00': 0,
        '100.01+': 0
    };
    
    let maxCrashPoint = 0;
    let maxWin = 0;
    
    for (let i = 0; i < rounds; i++) {
        const betAmount = 100;
        const crashPoint = generateCrashPoint();
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        let cashoutMultiplier = 0;
        if (behaviorType === 'conservative') {
            cashoutMultiplier = simulatePlayerBehaviorConservative(crashPoint);
        } else if (behaviorType === 'simple') {
            cashoutMultiplier = simulatePlayerBehaviorSimple(crashPoint);
        } else {
            cashoutMultiplier = simulatePlayerBehavior(crashPoint);
        }
        
        totalBets += betAmount;
        totalGames++;
        
        if (cashoutMultiplier > 0) {
            const winAmount = betAmount * cashoutMultiplier;
            totalPayouts += winAmount;
            wins++;
            
            if (winAmount > maxWin) {
                maxWin = winAmount;
            }
        } else {
            losses++;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
        if (crashPoint <= 2.00) crashRanges['1.01-2.00']++;
        else if (crashPoint <= 5.00) crashRanges['2.01-5.00']++;
        else if (crashPoint <= 10.00) crashRanges['5.01-10.00']++;
        else if (crashPoint <= 20.00) crashRanges['10.01-20.00']++;
        else if (crashPoint <= 50.00) crashRanges['20.01-50.00']++;
        else if (crashPoint <= 100.00) crashRanges['50.01-100.00']++;
        else crashRanges['100.01+']++;
        
        if (crashPoint > maxCrashPoint) {
            maxCrashPoint = crashPoint;
        }
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100,000 —Ä–∞—É–Ω–¥–æ–≤
        if ((i + 1) % 100000 === 0) {
            const progress = ((i + 1) / rounds * 100).toFixed(1);
            const currentRTP = (totalPayouts / totalBets * 100).toFixed(2);
            console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}% | –¢–µ–∫—É—â–∏–π RTP: ${currentRTP}%`);
        }
    }
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    const rtp = totalPayouts / totalBets;
    const winRate = wins / totalGames;
    const houseEdge = 1 - rtp;
    
    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log("\n" + "=".repeat(50));
    console.log("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê RTP");
    console.log("=".repeat(50));
    
    console.log(`üéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤: ${rounds.toLocaleString()}`);
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
    console.log(`üìà –°–∫–æ—Ä–æ—Å—Ç—å: ${(rounds / duration).toLocaleString()} —Ä–∞—É–Ω–¥–æ–≤/—Å–µ–∫`);
    
    console.log(`\nüí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:`);
    console.log(`üì• –û–±—â–∏–µ —Å—Ç–∞–≤–∫–∏: ${totalBets.toLocaleString()}`);
    console.log(`üì§ –û–±—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã: ${totalPayouts.toLocaleString()}`);
    console.log(`üéØ RTP: ${(rtp * 100).toFixed(4)}%`);
    console.log(`üè† House Edge: ${(houseEdge * 100).toFixed(4)}%`);
    console.log(`üìä –í–∏–Ω—Ä–µ–π—Ç: ${(winRate * 100).toFixed(2)}%`);
    
    console.log(`\nüèÜ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø:`);
    console.log(`üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–∞—à: x${maxCrashPoint.toFixed(2)}`);
    console.log(`üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: ${maxWin.toFixed(2)}`);
    
    console.log(`\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–†–ê–®–ï–ô:`);
    for (const [range, count] of Object.entries(crashRanges)) {
        const percentage = (count / rounds * 100).toFixed(2);
        console.log(`${range}: ${count.toLocaleString()} (${percentage}%)`);
    }
    
    console.log(`\nüéÆ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†:`);
    console.log(`‚úÖ –í—ã–∏–≥—Ä—ã—à–∏: ${wins.toLocaleString()} (${(wins/totalGames*100).toFixed(2)}%)`);
    console.log(`‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à–∏: ${losses.toLocaleString()} (${(losses/totalGames*100).toFixed(2)}%)`);
    
    // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    console.log(`\nüìà –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê:`);
    const targetRTP = 0.96;
    const rtpDeviation = Math.abs(rtp - targetRTP);
    
    if (rtpDeviation < 0.001) {
        console.log(`‚úÖ –û–¢–õ–ò–ß–ù–û! RTP –æ—á–µ–Ω—å –±–ª–∏–∑–æ–∫ –∫ —Ü–µ–ª–µ–≤–æ–º—É (96.00%)`);
    } else if (rtpDeviation < 0.005) {
        console.log(`‚úÖ –•–û–†–û–®–û! RTP –±–ª–∏–∑–æ–∫ –∫ —Ü–µ–ª–µ–≤–æ–º—É (96.00%)`);
    } else if (rtpDeviation < 0.01) {
        console.log(`‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! RTP –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö`);
    } else {
        console.log(`‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò! RTP —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ`);
    }
    
    console.log(`üéØ –¶–µ–ª–µ–≤–æ–π RTP: ${(targetRTP * 100).toFixed(2)}%`);
    console.log(`üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π RTP: ${(rtp * 100).toFixed(4)}%`);
    console.log(`üìè –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${(rtpDeviation * 100).toFixed(4)}%`);
    
    return {
        rtp, winRate, houseEdge, totalBets, totalPayouts,
        wins, losses, maxCrashPoint, maxWin, duration, crashRanges
    };
}

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è
function compareAllBehaviors(rounds = 100000) {
    console.log("\n" + "=".repeat(70));
    console.log("üî¨ –°–†–ê–í–ù–ï–ù–ò–ï –í–°–ï–• –í–ê–†–ò–ê–ù–¢–û–í –ü–û–í–ï–î–ï–ù–ò–Ø –ò–ì–†–û–ö–û–í");
    console.log("=".repeat(70));
    
    const results = [];
    
    // –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    console.log("\nüßÆ –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ");
    results.push({name: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ", ...testRTP(rounds, 'standard')});
    
    // –¢–µ—Å—Ç 2: –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    console.log("\nüßÆ –¢–µ—Å—Ç 2: –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ");
    results.push({name: "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ", ...testRTP(rounds, 'conservative')});
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    console.log("\nüßÆ –¢–µ—Å—Ç 3: –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ");
    results.push({name: "–ü—Ä–æ—Å—Ç–æ–µ", ...testRTP(rounds, 'simple')});
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log("\n" + "=".repeat(70));
    console.log("üìä –°–†–ê–í–ù–ï–ù–ò–ï –í–°–ï–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í");
    console.log("=".repeat(70));
    
    console.log(`\nüìà RTP:`);
    results.forEach(result => {
        console.log(`   ${result.name}: ${(result.rtp * 100).toFixed(4)}%`);
    });
    
    console.log(`\nüéØ –í–∏–Ω—Ä–µ–π—Ç:`);
    results.forEach(result => {
        console.log(`   ${result.name}: ${(result.winRate * 100).toFixed(2)}%`);
    });
    
    console.log(`\nüî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–∞—à:`);
    results.forEach(result => {
        console.log(`   ${result.name}: x${result.maxCrashPoint.toFixed(2)}`);
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const targetRTP = 0.96;
    const bestResult = results.reduce((best, current) => {
        const currentDeviation = Math.abs(current.rtp - targetRTP);
        const bestDeviation = Math.abs(best.rtp - targetRTP);
        return currentDeviation < bestDeviation ? current : best;
    });
    
    console.log(`\nüèÜ –õ–£–ß–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:`);
    console.log(`   ${bestResult.name}`);
    console.log(`   RTP: ${(bestResult.rtp * 100).toFixed(4)}%`);
    console.log(`   –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${(Math.abs(bestResult.rtp - targetRTP) * 100).toFixed(4)}%`);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
console.log("üöÄ –ó–∞–ø—É—Å–∫ –§–ò–ù–ê–õ–¨–ù–û –ü–†–ê–í–ò–õ–¨–ù–´–• —Ç–µ—Å—Ç–æ–≤ RTP...\n");

// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π
const mainResult = testRTP(1000000, 'simple');

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è
compareAllBehaviors(100000);

console.log("\n" + "=".repeat(50));
console.log("‚úÖ –§–ò–ù–ê–õ–¨–ù–û –ü–†–ê–í–ò–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!");
console.log("=".repeat(50)); 