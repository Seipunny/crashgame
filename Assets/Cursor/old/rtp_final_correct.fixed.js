// üß™ –§–ò–ù–ê–õ–¨–ù–û –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ç–µ—Å—Ç RTP –¥–ª—è –∫—Ä–∞—à-–∏–≥—Ä—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
// –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –Ω–∞ 1,000,000 –ø–æ–ø—ã—Ç–æ–∫ —Å —Ü–µ–ª–µ–≤—ã–º RTP 96% (house edge 4%)

console.log("üéÆ –§–ò–ù–ê–õ–¨–ù–û –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ç–µ—Å—Ç RTP –¥–ª—è –∫—Ä–∞—à-–∏–≥—Ä—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)");
console.log("=".repeat(50));

// ========= –ü–ê–†–ê–ú–ï–¢–†–´ –°–ò–ú–£–õ–Ø–¶–ò–ò =========
const ROUNDS = 1_000_000;
const BET_AMOUNT = 100;
const MIN_MULT = 1.01;
const MAX_MULT = 1000;
const EPSILON = 0.04; // –¥–æ–º. –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ (4%), => —Ü–µ–ª–µ–≤–æ–π RTP = 1 - EPSILON = 0.96

// ========= –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê –ö–†–ê–®-–ò–ì–†–´ =========
// –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –≤—ã–∂–∏–≤–∞–Ω–∏—è P(M >= m) = (1 - EPSILON)/m, m >= 1
// –í—ã–±–æ—Ä–∫–∞: M = (1 - EPSILON) / (1 - U), U ~ Uniform(0,1)
function generateCrashPoint() {
  const u = Math.random();
  let m = (1 - EPSILON) / (1 - u);
  if (m < MIN_MULT) m = MIN_MULT;
  if (m > MAX_MULT) m = MAX_MULT;
  return m;
}

// ========= –ü–û–í–ï–î–ï–ù–ò–ï –ò–ì–†–û–ö–û–í =========
// –ò–≥—Ä–æ–∫ –∑–∞—Ä–∞–Ω–µ–µ –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–µ–ª—å –∫–µ—à–∞—É—Ç–∞ target; –≤—ã–∏–≥—Ä—ã—à, –µ—Å–ª–∏ crash >= target
function sampleTarget_standard() {
  const r = Math.random();
  if (r < 0.55) return 1.10 + Math.random() * 1.40; // 1.10‚Äì2.50
  if (r < 0.85) return 2.50 + Math.random() * 2.50; // 2.50‚Äì5.00
  if (r < 0.97) return 5.00 + Math.random() * 5.00; // 5.00‚Äì10.00
  return 10.00 + Math.random() * 40.00;             // 10.00‚Äì50.00
}

function simulatePlayerBehavior(crashPoint) {
  const target = sampleTarget_standard();
  return crashPoint >= target ? target : 0; // –≤–µ—Ä–Ω—É—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫–µ—à–∞—É—Ç–∞ (–∏–ª–∏ 0 –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ)
}

// ========= –£–¢–ò–õ–ò–¢–´ =========
function formatNumber(n) {
  return n.toLocaleString("ru-RU", { maximumFractionDigits: 3 });
}
function formatMs(ms) {
  return (ms / 1000).toFixed(2) + " —Å–µ–∫—É–Ω–¥";
}

// ========= –°–¢–ê–¢–ò–°–¢–ò–ö–ê =========
let totalBets = 0;
let totalPayouts = 0;
let wins = 0;
let losses = 0;
let maxCrash = 0;
let maxWin = 0;

const bins = [
  { name: "1.01-2.00", from: 1.01, to: 2.00, count: 0 },
  { name: "2.01-5.00", from: 2.01, to: 5.00, count: 0 },
  { name: "5.01-10.00", from: 5.01, to: 10.00, count: 0 },
  { name: "10.01-20.00", from: 10.01, to: 20.00, count: 0 },
  { name: "20.01-50.00", from: 20.01, to: 50.00, count: 0 },
  { name: "50.01-100.00", from: 50.01, to: 100.00, count: 0 },
  { name: "100.01+", from: 100.01, to: Infinity, count: 0 },
];

const t0 = Date.now();

for (let i = 1; i <= ROUNDS; i++) {
  const crash = generateCrashPoint();
  totalBets += BET_AMOUNT;

  // –±–∏–Ω—ã
  for (const b of bins) {
    if (crash >= b.from && crash <= b.to) { b.count++; break; }
  }

  const cashoutMult = simulatePlayerBehavior(crash);
  if (cashoutMult > 0) {
    const payout = BET_AMOUNT * cashoutMult;
    totalPayouts += payout;
    wins++;
    if (payout > maxWin) maxWin = payout;
  } else {
    losses++;
  }

  if (crash > maxCrash) maxCrash = crash;

  // –ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 10%
  if (i % (ROUNDS / 10) === 0) {
    const progress = (i / ROUNDS * 100).toFixed(1);
    const rtp = (totalPayouts / totalBets) * 100;
    console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}% | –¢–µ–∫—É—â–∏–π RTP: ${rtp.toFixed(2)}%`);
  }
}

const t1 = Date.now();
const elapsedMs = t1 - t0;

// ========= –ò–¢–û–ì–ò =========
const RTP = totalPayouts / totalBets * 100;
const houseEdge = 100 - RTP;
const winrate = wins / ROUNDS * 100;
const speed = ROUNDS / (elapsedMs / 1000);

console.log("\\n==================================================");
console.log("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê RTP (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)");
console.log("==================================================");
console.log(`üéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤: ${formatNumber(ROUNDS)}`);
console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${formatMs(elapsedMs)}`);
console.log(`üìà –°–∫–æ—Ä–æ—Å—Ç—å: ${formatNumber(speed)} —Ä–∞—É–Ω–¥–æ–≤/—Å–µ–∫\\n`);

console.log("üí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:");
console.log(`üì• –û–±—â–∏–µ —Å—Ç–∞–≤–∫–∏: ${formatNumber(totalBets)}`);
console.log(`üì§ –û–±—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã: ${formatNumber(totalPayouts)}`);
console.log(`üéØ RTP: ${RTP.toFixed(4)}%`);
console.log(`üè† House Edge: ${houseEdge.toFixed(4)}%`);
console.log(`üìä –í–∏–Ω—Ä–µ–π—Ç: ${winrate.toFixed(2)}%\\n`);

console.log("üèÜ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø:");
console.log(`üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–∞—à: x${maxCrash.toFixed(2)}`);
console.log(`üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: ${formatNumber(maxWin.toFixed(2))}\\n`);

console.log("üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–†–ê–®–ï–ô:");
const totalCrashes = bins.reduce((s, b) => s + b.count, 0);
bins.forEach((b, idx) => {
  const pct = (b.count / totalCrashes * 100).toFixed(2);
  console.log(`${idx + 1}. ${b.name}: ${formatNumber(b.count)} (${pct}%)`);
});

console.log("\\nüéÆ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†:");
console.log(`‚úÖ –í—ã–∏–≥—Ä—ã—à–∏: ${formatNumber(wins)} (${winrate.toFixed(2)}%)`);
console.log(`‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à–∏: ${formatNumber(losses)} (${(100 - winrate).toFixed(2)}%)\\n`);

console.log("üìà –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê:");
const targetRTP = 96.00;
const deviation = RTP - targetRTP;
const ok = Math.abs(deviation) <= 0.5;
console.log(ok ? "‚úÖ OK: RTP –±–ª–∏–∑–æ–∫ –∫ —Ü–µ–ª–µ–≤–æ–º—É" : "‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò! RTP –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ");
console.log(`üéØ –¶–µ–ª–µ–≤–æ–π RTP: ${targetRTP.toFixed(2)}%`);
console.log(`üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π RTP: ${RTP.toFixed(4)}%`);
console.log(`üìè –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${deviation.toFixed(4)}%`);
