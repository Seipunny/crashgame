using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using TMPro;

public class CrashGamePrototype : MonoBehaviour
{
    [Header("Game Settings")]
    public float playerBalance = 1000f;
    public float currentBet = 10f;
    public float minBet = 10f;
    public float maxBet = 100f;
    public float betStep = 5f;
    
    [Header("Game State")]
    public bool isGameRunning = false;
    public bool hasPlacedBet = false;
    public bool hasCashedOut = false;
    public bool isBettingPhase = false;
    public float currentMultiplier = 1f;
    public float gameTime = 0f;
    public float crashPoint = 1f;
    public float finalWinAmount = 0f;
    
    [Header("Round System")]
    public float bettingPhaseDuration = 5f;
    public float bettingPhaseTime = 0f;
    public int currentRound = 1;
    
    [Header("UI Elements")]
    public TextMeshProUGUI multiplierText;
    public TextMeshProUGUI balanceText;
    public TextMeshProUGUI betText;
    public TextMeshProUGUI statusText;
    public TextMeshProUGUI historyText;
    public TextMeshProUGUI finalWinText;
    public TextMeshProUGUI roundText;
    public Slider bettingProgressBar;
    
    [Header("Buttons")]
    public Button placeBetButton;
    public Button cashoutButton;
    public Button increaseBetButton;
    public Button decreaseBetButton;
    
    [Header("UI Colors")]
    public Color normalColor = Color.white;
    public Color winColor = Color.green;
    public Color loseColor = Color.red;
    public Color missedColor = Color.yellow;
    
    [Header("History")]
    public string[] gameHistory = new string[10];
    public int historyIndex = 0;
    
    private Coroutine gameCoroutine;
    
    private void Start()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
        playerBalance = 1000f;
        currentBet = Mathf.Clamp(10f, minBet, maxBet);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–∞—É–Ω–¥–æ–≤ (UI —Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        StartNewRound();
    }
    
    private void Update()
    {
        if (isGameRunning)
        {
            UpdateGame();
        }
    }
    
    private void UpdateGame()
    {
        gameTime += Time.deltaTime;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
        currentMultiplier = Mathf.Pow(1.1f, gameTime);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—à
        if (currentMultiplier >= crashPoint)
        {
            Crash();
        }
        
        UpdateUI();
    }
    
    public void SetupUI()
    {
        Debug.Log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...");
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
        if (placeBetButton != null)
        {
            placeBetButton.onClick.AddListener(PlaceBet);
            Debug.Log("‚úÖ PlaceBetButton –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è PlaceBetButton –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        if (cashoutButton != null)
        {
            cashoutButton.onClick.AddListener(Cashout);
            Debug.Log("‚úÖ CashoutButton –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è CashoutButton –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        if (increaseBetButton != null)
        {
            increaseBetButton.onClick.AddListener(IncreaseBet);
            Debug.Log("‚úÖ IncreaseBetButton –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è IncreaseBetButton –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        if (decreaseBetButton != null)
        {
            decreaseBetButton.onClick.AddListener(DecreaseBet);
            Debug.Log("‚úÖ DecreaseBetButton –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è DecreaseBetButton –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        Debug.Log("‚úÖ UI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
    }
    
    public void PlaceBet()
    {
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç –∏ —É–∂–µ –±—ã–ª –∫–µ—à–∞—É—Ç - –±–ª–æ–∫–∏—Ä—É–µ–º
        if (isGameRunning && hasCashedOut)
        {
            return;
        }
        
        // –ï—Å–ª–∏ –≤ —Ñ–∞–∑–µ —Å—Ç–∞–≤–æ–∫ –∏ —Å—Ç–∞–≤–∫–∞ –µ—â–µ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞
        if (isBettingPhase && !hasPlacedBet)
        {
            hasPlacedBet = true;
            playerBalance -= currentBet;
            UpdateUI();
            return;
        }
        
        // –ï—Å–ª–∏ –≤ —Ñ–∞–∑–µ —Å—Ç–∞–≤–æ–∫ –∏ —Å—Ç–∞–≤–∫–∞ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞ - –æ—Ç–º–µ–Ω—è–µ–º
        if (isBettingPhase && hasPlacedBet)
        {
            hasPlacedBet = false;
            playerBalance += currentBet;
            UpdateUI();
            return;
        }
        
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç –∏ —Å—Ç–∞–≤–∫–∞ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞ - —Ä–∞–∑–º–µ—â–∞–µ–º
        if (isGameRunning && !hasPlacedBet && !hasCashedOut)
        {
            hasPlacedBet = true;
            playerBalance -= currentBet;
            UpdateUI();
            return;
        }
    }
    
    public void Cashout()
    {
        Debug.Log($"üîò Cashout –≤—ã–∑–≤–∞–Ω! isGameRunning={isGameRunning}, hasPlacedBet={hasPlacedBet}, hasCashedOut={hasCashedOut}");
        
        if (!isGameRunning || !hasPlacedBet || hasCashedOut) 
        {
            Debug.Log("‚ùå Cashout: —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ");
            return;
        }
        
        hasCashedOut = true;
        finalWinAmount = currentBet * currentMultiplier;
        playerBalance += finalWinAmount;
        
        Debug.Log($"‚úÖ –ö–µ—à–∞—É—Ç! –í—ã–∏–≥—Ä—ã—à: {finalWinAmount:F2}");
        
        AddToHistory($"WIN x{currentMultiplier:F2}");
        
        UpdateUI();
    }
    
    public void IncreaseBet()
    {
        if (isGameRunning || hasPlacedBet) return;
        
        currentBet = Mathf.Min(currentBet + betStep, maxBet);
        UpdateUI();
    }
    
    public void DecreaseBet()
    {
        if (isGameRunning || hasPlacedBet) return;
        
        currentBet = Mathf.Max(currentBet - betStep, minBet);
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
        if (currentBet < minBet) currentBet = minBet;
        
        UpdateUI();
    }
    
    private void StartNewRound()
    {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫—Ä–∞—à-–ø–æ–π–Ω—Ç
        crashPoint = GenerateCrashPoint();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        isGameRunning = false;
        hasPlacedBet = false;
        hasCashedOut = false;
        currentMultiplier = 1f;
        finalWinAmount = 0f;
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∞–∑—É —Å—Ç–∞–≤–æ–∫
        isBettingPhase = true;
        bettingPhaseTime = 0f;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        SetBettingPhaseButtonStates();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–∑—É —Å—Ç–∞–≤–æ–∫
        StartCoroutine(BettingPhase());
    }
    
    private IEnumerator BettingPhase()
    {
        while (bettingPhaseTime < bettingPhaseDuration && isBettingPhase)
        {
            bettingPhaseTime += Time.deltaTime;
            UpdateUI();
            yield return null;
        }
        
        // –§–∞–∑–∞ —Å—Ç–∞–≤–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
        isBettingPhase = false;
        
        // –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Ñ–∞–∑—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∏ –∏–≥—Ä–æ–∫ —Å—Ç–∞–≤–∫—É
        StartGame();
    }
    
    private void StartGame()
    {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        isGameRunning = true;
        
        // –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ –∫—Ä–∞—à–∞ –∏–ª–∏ –∫–µ—à–∞—É—Ç–∞
        gameCoroutine = StartCoroutine(GameLoop());
    }
    
    private IEnumerator GameLoop()
    {
        gameTime = 0f;
        
        while (isGameRunning)
        {
            gameTime += Time.deltaTime;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
            currentMultiplier = Mathf.Pow(1.1f, gameTime);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—à
            if (currentMultiplier >= crashPoint)
            {
                Crash();
                break;
            }
            
            UpdateUI();
            yield return null;
        }
    }
    
    private void Crash()
    {
        if (!isGameRunning) return;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        AddToHistory($"CRASH x{currentMultiplier:F2}");
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (hasPlacedBet && !hasCashedOut)
        {
            // –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª
            if (statusText != null)
            {
                statusText.text = "–ö—Ä–∞—à! –ü—Ä–æ–∏–≥—Ä—ã—à";
                statusText.color = loseColor;
            }
        }
        else if (hasCashedOut)
        {
            // –ò–≥—Ä–æ–∫ —É–∂–µ –∑–∞–±—Ä–∞–ª –≤—ã–∏–≥—Ä—ã—à
            if (statusText != null)
            {
                statusText.text = "–£–ü–£–©–ï–ù–û!";
                statusText.color = missedColor;
            }
        }
        else
        {
            // –ò–≥—Ä–æ–∫ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª
            if (statusText != null)
            {
                statusText.text = $"–ö—Ä–∞—à! x{currentMultiplier:F2} (–∏–≥—Ä–æ–∫ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª)";
                statusText.color = normalColor;
            }
        }
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥
        EndRound();
    }
    
    private void EndRound()
    {
        isGameRunning = false;
        
        if (gameCoroutine != null)
        {
            StopCoroutine(gameCoroutine);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        StartCoroutine(DelayedNewRound());
    }
    
    private IEnumerator DelayedNewRound()
    {
        yield return new WaitForSeconds(2f);
        currentRound++;
        StartNewRound();
    }
    
    private void SetBettingPhaseButtonStates()
    {
        if (placeBetButton != null)
        {
            placeBetButton.interactable = true;
        }
        
        if (increaseBetButton != null)
        {
            increaseBetButton.interactable = !hasPlacedBet;
        }
        
        if (decreaseBetButton != null)
        {
            decreaseBetButton.interactable = !hasPlacedBet;
        }
        
        if (cashoutButton != null)
        {
            cashoutButton.interactable = false;
        }
    }
    
    private void SetButtonStates(bool gameRunning)
    {
        if (placeBetButton != null)
        {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ —É–∂–µ –±—ã–ª –∫–µ—à–∞—É—Ç
            placeBetButton.interactable = !hasCashedOut;
        }
        
        if (cashoutButton != null)
        {
            bool shouldBeInteractable = gameRunning && hasPlacedBet && !hasCashedOut;
            cashoutButton.interactable = shouldBeInteractable;
            Debug.Log($"üîò –ö–µ—à–∞—É—Ç –∫–Ω–æ–ø–∫–∞: gameRunning={gameRunning}, hasPlacedBet={hasPlacedBet}, hasCashedOut={hasCashedOut}, interactable={shouldBeInteractable}");
        }
        
        if (increaseBetButton != null)
        {
            increaseBetButton.interactable = !gameRunning && !hasPlacedBet;
        }
        
        if (decreaseBetButton != null)
        {
            decreaseBetButton.interactable = !gameRunning && !hasPlacedBet;
        }
    }
    
    public void UpdateUI()
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã
        if (multiplierText != null)
            multiplierText.text = $"x{currentMultiplier:F2}";
        
        if (balanceText != null)
            balanceText.text = $"üí∞ –ë–∞–ª–∞–Ω—Å: {playerBalance:F0}";
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞
        if (roundText != null)
        {
            roundText.text = $"üéØ –†–∞—É–Ω–¥ {currentRound}";
        }
        
        if (betText != null)
        {
            if (hasPlacedBet && isGameRunning)
            {
                float potentialWin = currentBet * currentMultiplier;
                betText.text = $"–°—Ç–∞–≤–∫–∞: {currentBet:F0} | –í—ã–∏–≥—Ä—ã—à: {potentialWin:F0}";
                betText.color = normalColor;
            }
            else if (hasCashedOut && isGameRunning)
            {
                betText.text = $"–°—Ç–∞–≤–∫–∞: {currentBet:F0} | –ó–∞–±—Ä–∞–Ω–æ: +{finalWinAmount:F0}";
                betText.color = winColor;
            }
            else
            {
                betText.text = $"–°—Ç–∞–≤–∫–∞: {currentBet:F0}";
                betText.color = normalColor;
            }
        }
        
        if (statusText != null)
        {
            if (isBettingPhase)
            {
                float timeLeft = bettingPhaseDuration - bettingPhaseTime;
                if (hasPlacedBet)
                {
                    statusText.text = $"‚úÖ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å: {timeLeft:F1}—Å";
                    statusText.color = winColor;
                }
                else
                {
                    statusText.text = $"‚è∞ –§–∞–∑–∞ —Å—Ç–∞–≤–æ–∫! –û—Å—Ç–∞–ª–æ—Å—å: {timeLeft:F1}—Å";
                    statusText.color = normalColor;
                }
            }
            else if (isGameRunning)
            {
                if (hasPlacedBet)
                {
                    statusText.text = "üéÆ –ò–≥—Ä–∞ –∏–¥–µ—Ç...";
                    statusText.color = normalColor;
                }
                else if (hasCashedOut)
                {
                    statusText.text = $"–ö–µ—à–∞—É—Ç! +{finalWinAmount:F0}";
                    statusText.color = winColor;
                }
                else
                {
                    statusText.text = "üëÄ –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...";
                    statusText.color = normalColor;
                }
            }
            else if (hasPlacedBet)
            {
                statusText.text = "–ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ";
                statusText.color = normalColor;
            }
            else
            {
                statusText.text = "–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Å—Ç–∞–≤–∫—É";
                statusText.color = normalColor;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        UpdateHistoryUI();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à
        UpdateFinalWinText();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ñ–∞–∑—ã —Å—Ç–∞–≤–æ–∫
        UpdateBettingProgressBar();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ñ–∞–∑–µ —Å—Ç–∞–≤–æ–∫
        if (isBettingPhase)
        {
            SetBettingPhaseButtonStates();
            UpdateBetButtonText();
        }
        else
        {
            SetButtonStates(isGameRunning);
            UpdateBetButtonText();
        }
    }
    
    private void UpdateHistoryUI()
    {
        if (historyText == null) return;
        
        string historyDisplay = "–ò—Å—Ç–æ—Ä–∏—è:\n";
        for (int i = 0; i < gameHistory.Length; i++)
        {
            if (!string.IsNullOrEmpty(gameHistory[i]))
            {
                historyDisplay += gameHistory[i] + "\n";
            }
        }
        
        historyText.text = historyDisplay;
    }
    
    private void UpdateFinalWinText()
    {
        if (finalWinText == null) return;
        
        if (hasCashedOut && finalWinAmount > 0)
        {
            finalWinText.text = $"üéâ –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à: +{finalWinAmount:F0}";
            finalWinText.color = winColor;
        }
        else
        {
            finalWinText.text = "";
        }
    }
    
    private void UpdateBettingProgressBar()
    {
        if (bettingProgressBar == null) return;
        
        if (isBettingPhase)
        {
            bettingProgressBar.gameObject.SetActive(true);
            bettingProgressBar.value = bettingPhaseTime / bettingPhaseDuration;
        }
        else
        {
            bettingProgressBar.gameObject.SetActive(false);
        }
    }
    
    private void UpdateBetButtonText()
    {
        if (placeBetButton == null) return;
        
        if (hasCashedOut)
        {
            placeBetButton.GetComponentInChildren<TextMeshProUGUI>().text = "–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û";
        }
        else if (isBettingPhase)
        {
            placeBetButton.GetComponentInChildren<TextMeshProUGUI>().text = hasPlacedBet ? "–û–¢–ú–ï–ù–ò–¢–¨" : "–°–¢–ê–í–ö–ê";
        }
        else if (isGameRunning && !hasPlacedBet)
        {
            placeBetButton.GetComponentInChildren<TextMeshProUGUI>().text = "–°–¢–ê–í–ö–ê";
        }
        else
        {
            placeBetButton.GetComponentInChildren<TextMeshProUGUI>().text = "–°–¢–ê–í–ö–ê";
        }
    }
    
    private void AddToHistory(string result)
    {
        if (historyIndex >= gameHistory.Length)
        {
            historyIndex = 0;
        }
        
        gameHistory[historyIndex] = result;
        historyIndex++;
        
        UpdateHistoryUI();
    }
    
    private float GenerateCrashPoint()
    {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—à-–ø–æ–π–Ω—Ç–∞ —Å RTP ~96%
        float random = Random.Range(0f, 1f);
        float crashPoint = 1f / (1f - random * 0.96f);
        return Mathf.Clamp(crashPoint, 1.01f, 1000f);
    }
} 